/* [wxMaxima batch file version 1] [ DO NOT EDIT BY HAND! ]*/
/* [ Created with wxMaxima version 12.04.0 ] */

/* [wxMaxima: comment start ]
space_time_projection.wxm

GNU General Public License 2019  Stephen Athel Abbott.
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
An application document for Geometric Algebra using wxMaxima

Ref: The Survey, paragraph 4.1.2
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
Use of the fourth axis, e4, for finite hemispherical projection of G(1,3)
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
Initialization
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
ext:["wxm"]$
file_type_maxima:append(ext,file_type_maxima)$
batchload("initialize_fns")$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
the pseudoscalar and its inverse
the lowest useable dimension pseudoscalar should be {e1,e2} i.e. Plen = 2
e.g. for four dimensions edit Pseudos:{e1,e2,e3}$ to Pseudos:{e1,e2,e3,e4}$
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
Pseudos:{e1,e2,e3,e4}$
Pvar:listofvars(Pseudos)$
Plen:length(Pvar)$
I:Pseudos$
ni:(Plen-1)*Plen/2$
Ii:(-1)^ni*I$
kill(ni)$
ldisplay(Pvar)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
batchload("initialize_lsts")$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
end of Initialization
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
set derivabbrev:false$
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
derivabbrev:false$
ratprint:false$
fpprintprec:6$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
The Survey, para.4.1.3
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
show the spacetime gammas required for the imitation of G(1,3), where, to avoid the use 
of gamma_zero, we have used the fourth axis, e4, for the time axis and the intrinsic
maxima imaginary, %i, for the space axes
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
g1:%i*{e1}$
g2:%i*{e2}$
g3:%i*{e3}$
g4:{e4}$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
the spacetime coordinate vector using the gammas
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
x:x1*g1+x2*g2+x3*g3+t*g4;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
we will use a simpler coordinate vector below
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
kill(x)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
numerical comparison of spacetime vector rotation with the Lorentz transformation
e.g. for a simple velocity, vel*vhat (= vel*g1)
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
vel:0.8$
alpha:atanh(vel)$
ahalf:alpha/2;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
form the rotation bivector
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
vhat:g1$
B:vhat&*g4*ahalf$
ev(%,numer,expand);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
form the left and right exponential multipliers
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
mvexp(-B,13)$
lexp:ev(%,numer,expand);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
mvexp(+B,13)$
rexp:ev(%,numer,expand);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
apply the rotation to a spacetime coordinate vector "parallel" to the velocity
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
x:x1*g1+t*g4;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
find the rotated spacetime vector
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
xbar:lexp&*x&*rexp$
ev(%,numer,expand)$
collectterms(%,%i,e1,e4);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
the Lorentz transformation factors
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
L:1/sqrt(1-vel^2);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
Lv:vel*1/sqrt(1-vel^2);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
the Lorentz space and time 
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
x1bar:(-Lv*t+L*x1)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
tbar:(+L*t-Lv*x1)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
the Lorentz spacetime vector below is now compared with the rotated spacetime vector 
above: the rotation using the exponential, mvexp(+B,13), was accurate to 7 decimal places
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
x1bar*g1+tbar*g4;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Start of spacetime projection
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
The Survey, paragraph 4.1.2, actually suggests a spacetime split using 
the geometric product; x&*gamma_zero, thus, using our g's as the gammas, that is x&*g4;
we could call this the split spacetime coordinate, splx
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
splx:x&*g4;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
in order to unsplit the split spacetime we postmultiply by the inverse of g4
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
invg4:g4/normod(g4)^2;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
to recover the spacetime coordinate vector
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
splx&*invg4;
is(equal(%,x));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
for the actual split into time and space
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
realpart(splx);
imagpart(splx);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
the spatial bivector suggests a spatial projection using {e4} as the projection axis;
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
for a sphere of radius, a, we project the finite planar region (a disc) of radius, 2*a,
onto the lower hemisphere; for x1 < 2*a, there is a unique point on the hemisphere;
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
more generally, for any point vector, p, in the 3D region, normp must be less than 2*a
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
p:x1*{e1}+x2*{e2}+x3*{e3}$
normp:normod(p)$
ldisplay(normp)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
now indicate the hemispherical projection parameters
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
beta:atan('normp/(2*a));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
using similar triangles and the right angle in the semicircle, the projected vector, s is
vector p plus a fraction, zeta, of the vector from the point of projection to the plane,
where zeta=(p*sin(beta)/(p/sin(beta))
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
zeta:(sin('beta))^2;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
the projected vector, s, from the origin to the (hemi)sphere
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
s:(1-'zeta)*p+2*a*'zeta*{e4};
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
or using eta rather than 'zeta
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
s:(1-eta)*p+2*a*eta*{e4};
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
s&.s;
facsum(%,[x1,x2,x3]);
/* [wxMaxima: input   end   ] */

/* Maxima can't load/batch files which end with a comment! */
"Created with wxMaxima"$

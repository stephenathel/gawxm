/* [wxMaxima batch file version 1] [ DO NOT EDIT BY HAND! ]*/
/* [ Created with wxMaxima version 12.04.0 ] */

/* [wxMaxima: comment start ]
work_scalarp_function.wxm

GNU General Public License 2020  Stephen Athel Abbott.
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
A short development document for Geometric Algebra with wxMaxima
contains...
Initialization
Loading of functions (intrinsic and GA specific)
Pseudoscalar definition (specifies the space dimension) and
Calculation of the inverse pseudoscalar used to generate the dual of a multivector
Enumeration of the standard basis for the specified dimension

use of the early Initialization template to show retrospective development 
of the functions normod() and scalarp(); includes some testing of
ratprint and maxima rational approximation;
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
Initialization
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
reset()$
kill(all)$
stardisp:true$
stringdisp:true$
noundisp:true$
simp:true$
dotdistrib:true$
derivabbrev:true$
lispdisp:true$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
load intrinsic (maxima or lisp) function files
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
load("basic")$
load("facexp")$
load("functs")$
load("scifac")$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
batchload GA specific (maxima) function files;
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
ext:["wxm"]$
file_type_maxima:append(ext,file_type_maxima)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
batchload("gafns0")$
batchload("gafns1")$
batchload("gafns2")$
batchload("gafns3")$
batchload("gafns4")$
batchload("gafns5")$
batchload("gafns6")$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
batchload GC specific (maxima) function files;
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
batchload("gcfns1")$
batchload("gcfns2")$
batchload("gcfns3")$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
the pseudoscalar and its inverse
the lowest useable dimension pseudoscalar should be {e1,e2} i.e. Plen = 2
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
Pseudos:{e1,e2,e3}$
Pvar:listofvars(Pseudos)$
Plen:length(Pvar)$
I:Pseudos$
ni:(Plen-1)*Plen/2$
Ii:(-1)^ni*I$
kill(ni)$
ldisplay(Pvar)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
initialize this list with the only list we have so far; Pvar
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
lstbases:makelist(Pvar[n],n,1,Plen)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
the integer array, nbases (n:0,...3) is used for grader(M) in gafns4.wxm;
in order to use the same indices for the lists, (n:1,...3) define it using function array()
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
array(nbases,Plen)$
eset:setify(Pvar)$
for ng:1 thru Plen do
block(nbases[ng]:combination(Plen,ng),
lstbases[ng]:full_listify(powerset(eset,ng)))$
maxnbases:(combination(Plen,floor(Plen/2)))$
nbases[0]:1$    /*an array index zero cannot be used to index any of the lists*/
ldisplay(lstbases)$
kill(eset,ng)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
initialize this list again with Pvar
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
lstblds:makelist(Pvar[n],n,1,Plen)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
the list named lstblds is used for grader(M) in gafns4.wxm;
lstblds is an list of lists of blades and allblds is a list of all blades
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
for ng:1 thru Plen do
block(lstb:lstbases[ng],
lstblds[ng]:makelist(list2blade(lst),lst,lstb))$
allblds:[]$
for ng:1 thru Plen do
block(allblds:append(allblds,lstblds[ng]))$
ldisplay(lstblds)$
ldisplay(allblds)$
kill(lstb,ng)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
end of Initialization
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
develop the functions normod(), scalarp();
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
function to find the scalar product of two multivectors
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
scalarp_code(M,N):=block([Mrev,G,arrprj,arrS,denG],
local(Mrev,G,arrprj,arrS,denG),
Mrev:mvrev(M),
G:Mrev&*N,
arrprj:grader(G),
arrS:make_array(any,Plen+2),
fillarray(arrS,arrprj),
denG:arrprj[Plen+1],
remarray(arrprj),
arrS[0]/denG)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
debug line for scalarp_code()...ldisplay(Mrev,G),...after...G:Mrev&*N;
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
function to find the norm (modulus) of a multivector
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
normod_code(M):=block([spM],
local(spM),
spM:scalarp_code(M,M),
sqrt(spM))$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
control the display of decimal places for decimal fractions (no trailing zeros)
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
fpprintprec:16$
ldisplay(fpprintprec,fpprec,ratprint)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
the integer input to function mvexp() was adjusted to the smallest
value (n=15) that displays all the same sig. figs. for the two coefficients;
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
theta:%pi/4$
bv:{e2,e3}$
mvexp(bv*theta,15)$
ebv:expand(ev(%,numer))$
ldisplay(ebv)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
the multivector product, geomp() within the function scalarp_code() gives the 
rational approximation notifications and a rational result;
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
scalarp_code(ebv,ebv);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
the usage can include ratprint:false$ and the result is then still rational;
the floating point value of the difference from unity is then shown;
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
ratprint:false$
scalarp_code(ebv,ebv);
float(1-%);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
finally test the function normod() in file, gafns5.wxm with good precision;
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
ldisplay(fpprintprec,fpprec,ratprint)$
normod(ebv)$
float(1-%);
/* [wxMaxima: input   end   ] */

/* Maxima can't load/batch files which end with a comment! */
"Created with wxMaxima"$

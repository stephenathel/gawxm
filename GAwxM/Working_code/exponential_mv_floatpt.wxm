/* [wxMaxima batch file version 1] [ DO NOT EDIT BY HAND! ]*/
/* [ Created with wxMaxima version 12.04.0 ] */

/* [wxMaxima: comment start ]
exponential_mv_floatpt.wxm

GNU General Public License 2020  Stephen Athel Abbott.
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
A development document for Geometric Algebra using wxMaxima
contains...
Initialization
Loading of functions (intrinsic and GA specific)
Pseudoscalar definition (specifies the space dimension) and
Calculation of the inverse pseudoscalar used to generate the dual of a multivector
Enumeration of the standard basis for the specified dimension

Test the code for function mvexpfp() for floating point exponential code
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
Initialization
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
reset()$
kill(all)$
stardisp:true$
stringdisp:true$
noundisp:true$
simp:true$
dotdistrib:true$
derivabbrev:true$
lispdisp:true$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
load intrinsic (maxima or lisp) function files
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
load("basic")$
load("facexp")$
load("functs")$
load("scifac")$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
batchload GA specific (maxima) function files;
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
ext:["wxm"]$
file_type_maxima:append(ext,file_type_maxima)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
batchload("gafns0")$
batchload("gafns1")$
batchload("gafns2")$
batchload("gafns3")$
batchload("gafns4")$
batchload("gafns5")$
batchload("gafns6")$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
batchload GC specific (maxima) function files;
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
batchload("gcfns1")$
batchload("gcfns2")$
batchload("gcfns3")$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
the pseudoscalar and its inverse
the lowest useable dimension pseudoscalar should be {e1,e2} i.e. Plen = 2
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
Pseudos:{e1,e2,e3}$
Pvar:listofvars(Pseudos)$
Plen:length(Pvar)$
I:Pseudos$
ni:(Plen-1)*Plen/2$
Ii:(-1)^ni*I$
kill(ni)$
ldisplay(Pvar)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
initialize this list with the only list we have so far; Pvar
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
lstbases:makelist(Pvar[n],n,1,Plen)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
the integer array, nbases (n:0,...3) is used for grader(M) in gafns4.wxm;
in order to use the same indices for the lists, (n:1,...3) define it using function array()
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
array(nbases,Plen)$
eset:setify(Pvar)$
for ng:1 thru Plen do
block(nbases[ng]:combination(Plen,ng),
lstbases[ng]:full_listify(powerset(eset,ng)))$
maxnbases:(combination(Plen,floor(Plen/2)))$
nbases[0]:1$    /*an array index zero cannot be used to index any of the lists*/
ldisplay(lstbases)$
kill(eset,ng)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
initialize this list again with Pvar
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
lstblds:makelist(Pvar[n],n,1,Plen)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
the list named lstblds is used for grader(M) in gafns4.wxm;
lstblds is an list of lists of blades and allblds is a list of all blades
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
for ng:1 thru Plen do
block(lstb:lstbases[ng],
lstblds[ng]:makelist(list2blade(lst),lst,lstb))$
allblds:[]$
for ng:1 thru Plen do
block(allblds:append(allblds,lstblds[ng]))$
ldisplay(lstblds)$
ldisplay(allblds)$
kill(lstb,ng)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
end of Initialization
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
derivabbrev:false$

fpprintprec:6$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
algebraic (integer) exponential function...(for reference,
from the document...exponential_multivector.wxm)
the first input is any multivector M (including scalar, a)
the second input is a non-negative integer, the highest index 
in the exponential sum (e.g. n=7 for numerical bivectors may give
an accuracy of 4 decimal places)
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
mvexp_code(M,n):=block([Mp,sum,num],
local(Mp,sum,num),
if integerp(n) then block(
if n<0 then return(false)
elseif n=0 then return(1)
elseif n=1 then return(1+M)
else block(Mp:M,sum:1+M,num:2,
loop,Mp:Mp&*M,Mp:1/num*Mp,
sum:sum+Mp,sum:facsum(sum,allblds),
num:num+1,
if num=n+1 then return(sum),
go(loop)))
else return(false))$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
floating point exponential function...
maxima performs high precision integer arithmetic in preference to floating point; 
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
if the code were to contain lines... 
ratprint:false...ratprint:true then we could leave ratprint:true intact after use;
e.g.
else block(ratprint:false,Mp:fpM,sum:1+fpM,num:2,
loop,Mp:Mp&*fpM,Mp:1/num*Mp,
sum:sum+Mp,sum:facsum(sum,allblds),
num:num+1,
if num=n+1 then return(sum),
go(loop)),ratprint:true,
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
mvexpfp_code(M,n):=block([fpM,Mp,sum,num],
local(fpM,Mp,sum,num),
if integerp(n) then block(fpM:float(M),
if n<0 then return(false)
elseif n=0 then return(1)
elseif n=1 then return(1+fpM)
else block(Mp:fpM,sum:1+fpM,num:2,
loop,Mp:Mp&*fpM,Mp:1/num*Mp,
sum:sum+Mp,sum:facsum(sum,allblds),
num:num+1,
if num=n+1 then return(sum),
go(loop)),
expand(ev(sum,float)))
else return(false))$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
however, here the usage controls ratprint outside of the function, for clarity
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
ratprint;
ratprint:false;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
show that the input index is tested and that scalar, a, is handled
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
a:log(2)$
mvexpfp_code(a,0);
mvexpfp_code(a,1);
mvexpfp_code(a,-1);
mvexpfp_code(a,1.1);
mvexpfp_code(a,5);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
test a few bivector angles
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
bv:{e1,e2}*%pi/3$
mvexpfp_code(bv,7);
kill(bv)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
ibv:{e2,e3}*%pi/4$
mvexpfp_code(ibv,7);
kill(ibv,theta)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
the inclusion of n=13 and/or a small value blade coefficient can
exercise the floating point code
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
bv:{e2,e3}*%pi/4+1e-6*{e1,e3}$
ldisplay(bv)$
mvexpfp_code(bv,13);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
test the function mvexpfp() in file, gafns6.wxm
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
bv:{e2,e3}*%pi/4+1e-6*{e1,e3}$
ldisplay(bv)$
mvexpfp(bv,13);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
for the original exponential function...mvexp(),larger values of n and/or 
coefficients with orders of magitude difference, have shown the 
maxima integer arithmetic becoming overwhelmed; see below...
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
bv:{e2,e3}*%pi/4+1e-6*{e1,e3}$
ldisplay(bv)$
mvexp(bv,13);
/* [wxMaxima: input   end   ] */

/* Maxima can't load/batch files which end with a comment! */
"Created with wxMaxima"$

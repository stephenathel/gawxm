/* [wxMaxima batch file version 1] [ DO NOT EDIT BY HAND! ]*/
/* [ Created with wxMaxima version 17.10.1 ] */
/* [wxMaxima: comment start ]
arglst_and_grader_code.wxm 

GNU General Public License 2013  Stephen Athel Abbott.
   [wxMaxima: comment end   ] */


/* [wxMaxima: comment start ]
A test document for Geometric Algebra with wxMaxima
contains...
Initialization
Loading of (intrinsic and GA specific)
Pseudoscalar definition (specifies the space dimension) and
calculation of the inverse pseudoscalar used to generate the dual of a multivector
Enumeration of the standard basis for the specified dimension

Functional tests for arglst() and grader() code
   [wxMaxima: comment end   ] */


/* [wxMaxima: comment start ]
Initialization
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
reset()$
kill(all)$
stardisp:true$
stringdisp:true$
noundisp:true$
simp:true$
dotdistrib:true$
derivabbrev:true$
lispdisp:true$
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
load intrinsic (maxima or lisp) function files
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
load("basic")$
load("facexp")$
load("functs")$
load("scifac")$
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
batchload GA specific (maxima) function files;
the initialization file, maxima-init.mac is in the /home directory 
and contains the variable, maxima_userdir, and this allows the paths
in file_search_maxima to be extended to point to the GA functions
ldisplay(maxima_userdir)$
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
batchload("gafns0")$
batchload("gafns1")$
batchload("gafns2")$
batchload("gafns3")$
batchload("gafns4")$
batchload("gafns5")$
batchload("gafns6")$
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
the pseudoscalar and its inverse
the lowest useable dimension pseudoscalar should be e1~e2 i.e. Plen = 2;
global parameters, Pseudos, Pvar[] and Plen, I and Ii
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
Pseudos:e1~e2~e3$
Pvar:listofvars(Pseudos)$
Plen:length(Pvar)$
I:Pseudos$
ni:(Plen-1)*Plen/2$
Ii:(-1)^ni*I$
kill(ni)$
ldisplay(Pvar,Plen,I,Ii)$
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
global array parameters 
lstbases[], nbases[], maxnbases
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
array(lstbases,Plen)$
array(nbases,Plen)$
eset:setify(Pvar)$
for ng:1 thru Plen do
block(nbases[ng]:combination(Plen,ng),
lstbases[ng]:full_listify(powerset(eset,ng)))$
maxnbases:(combination(Plen,floor(Plen/2)))$
kill(eset,ng)$
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
global arrays nbases[] and lstblds[] are used for grader(M) in gafns4.wxm
lstblds[] is an array of lists of blades and allblds[] is a list of all blades
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
array(lstblds,Plen)$
for ng:1 thru Plen do
block(lstb:lstbases[ng],
lstblds[ng]:makelist(list2blade(lst),lst,lstb))$
allblds:[]$
for ng:1 thru Plen do
block(allblds:append(allblds,lstblds[ng]))$
ldisplay(allblds)$
kill(lstb,ng)$
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
end of Initialization
   [wxMaxima: comment end   ] */


/* [wxMaxima: comment start ]
before arglst() is used in the grader() code, the denominator of any rational part
must be isolated and M:e1~e2~e3/d3-e2~e3/d2+1/d1*e1-n0/d0; can be used to test that
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
M:e1~e2~e3/d3-e2~e3/d2+1/d1*e1-n0/d0$
rM:rat(M)$
bM:denom(rM)$
aM:rM*bM$
aM:facsum(aM,allblds)$
ldisplay(M,bM,aM)$
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
the main operator of aM must be identified by the code below
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
if is(atom(aM)) then lstarg:[aM]
else block(opa:op(aM),  
if (opa="~") then lstarg:[aM]
elseif (opa="*") then block(eM:expand(aM),ope:op(eM),
if (ope="*") then lstarg:[aM] else lstarg:args(eM))
elseif (opa="+") then lstarg:args(aM) 
elseif (opa="^") then block(eM:expand(aM),lstarg:args(eM))
elseif (opa="-") then block(mM:-aM,
if is(atom(mM)) then lstarg:[aM]
else block(opm:op(mM),  
if (opm="~") then lstarg:[aM]
elseif (opm="*") then block(eM:expand(mM),ope:op(eM),
if (ope="*") then lstarg:[aM] else lstarg:-args(eM))
elseif (opm="+") then lstarg:-args(mM) 
elseif (opm="^") then block(eM:expand(mM),lstarg:-args(eM))))
else lstarg:[aM])$

lstarg;
opa;
ope;
opm;
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
source for the function arglst() in gafns6.wxm
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
arglst_code(aM):=block([lstarg,opa,eM,ope,mM,opm],
local(lstarg,opa,eM,ope,mM,opm),
if is(atom(aM)) then lstarg:[aM]
else block(opa:op(aM),  
if (opa="~") then lstarg:[aM]
elseif (opa="*") then block(eM:expand(aM),ope:op(eM),
if (ope="*") then lstarg:[aM] else lstarg:args(eM))
elseif (opa="+") then lstarg:args(aM) 
elseif (opa="^") then block(eM:expand(aM),lstarg:args(eM))
elseif (opa="-") then block(mM:-aM,
if is(atom(mM)) then lstarg:[aM]
else block(opm:op(mM),  
if (opm="~") then lstarg:[aM]
elseif (opm="*") then block(eM:expand(mM),ope:op(eM),
if (ope="*") then lstarg:[aM] else lstarg:-args(eM))
elseif (opm="+") then lstarg:-args(mM) 
elseif (opm="^") then block(eM:expand(mM),lstarg:-args(eM))))
else lstarg:[aM]))$
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
now embed the function arglst_code() in the grader() code
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
grarr:make_array(any,Plen+2)$
for grd:0 thru Plen do grarr[grd]:0$
grarr[Plen+1]:1$

rM:rat(M)$
bM:denom(rM)$
aM:rM*bM$
aM:facsum(aM,allblds)$
grarr[Plen+1]:bM$

for grd:Plen thru 1 step -1 do
block(
lstargs:arglst_code(aM),
lenarg:length(lstargs),
searchlst:lstblds[grd],
lengrd:nbases[grd],
lstgrdarg:[],

if not aM=0 then 
block(for na:1 thru lenarg do
block(strarg:string(lstargs[na]),
for ng:1 thru lengrd do
block(strbld:string(searchlst[ng]),
posb:ssearch(strbld,strarg,sequal),
if posb>0 then
block(lstgrdarg:endcons(strarg,lstgrdarg))))),

lenlst:length(lstgrdarg),
if lenlst>0 then 
block(evarg:make_array(any,lenlst+1),
for narg:1 thru lenlst do
block(evarg[narg]:eval_string(lstgrdarg[narg])),
argsum:sum(evarg[n],n,1,lenlst),
grarr[grd]:argsum,
aMn:aM-argsum,
aM:facsum(aMn,allblds)))$

grarr[0]:aM$
grarr$
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
arrayinfo(evarg);
listarray(evarg);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
ldisplay(searchlst)$
ldisplay(argsum)$
ldisplay(lstargs)$
ldisplay(aM)$
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
after the grader() code has completed, the above shows that the last search was for 
grade 1 bases, the last argsum found was the grade 1 part, the last argument list held 
just the grade 1 part and the scalar and that the scalar value, was allocated to grarr[0]
   [wxMaxima: comment end   ] */


/* [wxMaxima: comment start ]
while below, the array of grades, grarr, is copied and then removed
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
arr:make_array(any,Plen+2)$
fillarray(arr,grarr)$
remarray(grarr)$
arr[0];
arr[1];
arr[2];
arr[3];
denM:arr[Plen+1]$
ldisplay(denM)$
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
the denominator is held in grarr[Plen+1]
the graded multivector terms can be recovered by dividing by the denominator
arr[0]/denM;
arr[1]/denM; etc
   [wxMaxima: comment end   ] */


/* [wxMaxima: comment start ]
source for function grader() in gafns4.wxm (also held in grader_code_debug.wxm)
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
grader_code(M):=block([grarr,rM,bM,aM,grd,na,lstargs,lenarg,lengrd,lstgrdarg,
strarg,searchlst,ng,strbld,posb,lenlst,narg,evarg,argsum,aMn],
local(grarr,rM,bM,aM,grd,na,lstargs,lenarg,lengrd,lstgrdarg,strarg,searchlst,
ng,strbld,posb,lenlst,narg,evarg,argsum,aMn),

grarr:make_array(any,Plen+2),
for grd:0 thru Plen do grarr[grd]:0,
grarr[Plen+1]:1,

rM:rat(M),
bM:denom(rM),
aM:rM*bM,
aM:facsum(aM,allblds),
grarr[Plen+1]:bM,

for grd:Plen thru 1 step -1 do
block(
lstargs:arglst(aM),
lenarg:length(lstargs),
searchlst:lstblds[grd],
lengrd:nbases[grd],
lstgrdarg:[],

if not aM=0 then 
block(for na:1 thru lenarg do
block(strarg:string(lstargs[na]),
for ng:1 thru lengrd do
block(strbld:string(searchlst[ng]),
posb:ssearch(strbld,strarg,sequal),
if posb>0 then
block(lstgrdarg:endcons(strarg,lstgrdarg))))),

lenlst:length(lstgrdarg),
if lenlst>0 then 
block(evarg:make_array(any,lenlst+1),
for narg:1 thru lenlst do
block(evarg[narg]:eval_string(lstgrdarg[narg])),
argsum:sum(evarg[n],n,1,lenlst),
grarr[grd]:argsum,
aMn:aM-argsum,
aM:facsum(aMn,allblds))),

grarr[0]:aM,grarr)$
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
kill(arr)$
arr:grader_code(M)$
arr[0];
arr[1];
arr[2];
arr[3];
denM:arr[Plen+1]$
ldisplay(denM)$
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
arr[0]/denM;
arr[1]/denM;
arr[2]/denM;
arr[3]/denM;
/* [wxMaxima: input   end   ] */



/* Maxima can't load/batch files which end with a comment! */
"Created with wxMaxima"$

/* [wxMaxima batch file version 1] [ DO NOT EDIT BY HAND! ]*/
/* [ Created with wxMaxima version 11.08.0 ] */

/* [wxMaxima: comment start ]
extract_blade_scalar_and_basis.wxm 

GNU General Public License 2013  Stephen Athel Abbott.
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
A test document for Geometric Algebra with wxMaxima
contains...
Initialization
Loading of functions (intrinsic and GA specific)
Pseudoscalar definition (specifies the space dimension) and
calculation of the inverse pseudoscalar used to generate the dual of a multivector
Enumeration of the standard basis for the specified dimension

Develop and test the code for function extract() in gafns5.wxm
Show how the function extract() handles a scalar and the sign of the base in a blade
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
Initialization
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
reset()$
kill(all)$
stardisp:true$
stringdisp:true$
noundisp:true$
simp:true$
dotdistrib:true$
derivabbrev:true$
lispdisp:true$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
load intrinsic (maxima or lisp) function files
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
load("basic")$
load("facexp")$
load("functs")$
load("scifac")$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
batchload GA specific (maxima) function files;
the initialization file, maxima-init.mac is in the /home directory 
and contains the variable, maxima_userdir, and this allows the paths
in file_search_maxima to be extended to point to the GA functions
ldisplay(maxima_userdir)$
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
batchload("gafns0")$
batchload("gafns1")$
batchload("gafns2")$
batchload("gafns3")$
batchload("gafns4")$
batchload("gafns5")$
batchload("gafns6")$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
the pseudoscalar and its inverse
the lowest useable dimension pseudoscalar should be e1~e2 i.e. Plen = 2;
global parameters, Pseudos, Pvar[] and Plen, I and Ii
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
Pseudos:e1~e2~e3$
Pvar:listofvars(Pseudos)$
Plen:length(Pvar)$
I:Pseudos$
ni:(Plen-1)*Plen/2$
Ii:(-1)^ni*I$
kill(ni)$
ldisplay(Pvar,Plen,I,Ii)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
global array parameters 
lstbases[], nbases[], maxnbases
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
array(lstbases,Plen)$
array(nbases,Plen)$
eset:setify(Pvar)$
for ng:1 thru Plen do
block(nbases[ng]:combination(Plen,ng),
lstbases[ng]:full_listify(powerset(eset,ng)))$
maxnbases:(combination(Plen,floor(Plen/2)))$
kill(eset,ng)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
global arrays nbases[] and lstblds[] are used for grader(M) in gafns4.wxm
lstblds[] is an array of lists of blades and allblds[] is a list of all blades
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
array(lstblds,Plen)$
for ng:1 thru Plen do
block(lstb:lstbases[ng],
lstblds[ng]:makelist(list2blade(lst),lst,lstb))$
allblds:[]$
for ng:1 thru Plen do
block(allblds:append(allblds,lstblds[ng]))$
ldisplay(allblds)$
kill(lstb,ng)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
end of Initialization
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
the code under test is near the end of the document and when it works 
it is put into the function named extract_code() here and when that works 
it is transfered to gafns5.wxm as function extract()
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
extract_code(Rbld):=block([elst,rscalar,rbase,rblade,jb,bld,opR,parted,cord,base],
local(elst,rscalar,rbase,rblade,jb,bld,opR,parted,cord,base),

elst:false,
rscalar:false,
rbase:false,
rblade:false,

if lfreeof(Pvar,Rbld) then 
block(rscalar:true,cord:Rbld,base:1,elst:[rscalar,cord,base]),

if not rscalar then
for jb:1 thru 2^Plen-1 do block(if not rbase then
block(bld:allblds[jb],
if is(equal(Rbld,bld)) then
block(rbase:true,cord:1,base:Rbld,elst:[rscalar,cord,base]))),

if not rscalar and not rbase then
for jb:1 thru 2^Plen-1 do block(if not rbase then
block(bld:allblds[jb],
if is(equal(Rbld,-bld)) then 
block(rbase:true,cord:-1,base:-Rbld,elst:[rscalar,cord,base]))),

if not rscalar and not rbase then
block(opR:op(Rbld),if notequal(opR,"+") then
for jb:1 thru 2^Plen-1 do block(if not rblade then
block(bld:allblds[jb],parted:partition(Rbld,bld),
if parted[2]=bld then 
block(if lfreeof(Pvar,parted[1]) then 
block(rblade:true,cord:parted[1],base:parted[2],elst:[rscalar,cord,base]))))),

elst)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
test the function named extract_code() to extract the coefficient and base of a blade;
the output is extlst[rscalar,cord,base];
where rscalar is false means that the input was not a scalar
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
Rsca:-exp(x)*sin(y);
extlst:extract_code(Rsca)$
ldisplay(extlst)$
remove(extlst,value)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
Rbld:-exp(x)*sin(y)*-e2~e3;
extlst:extract_code(Rbld)$
ldisplay(extlst)$
remove(extlst,value)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
Rbld:-e1~e2~e3;
extlst:extract_code(Rbld)$
ldisplay(extlst)$
remove(extlst,value)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
Rbld:-e2;
extlst:extract_code(Rbld)$
ldisplay(extlst)$
remove(extlst,value)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
develop using Pvar and allblds[]
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
ldisplay(Pvar)$
for j:1 thru 2^Plen-1 do block(bld:allblds[j],ldisplay(bld))$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
these inputs further test the function extract_code()
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
Rbld:ang*e2~e3;
extlst:extract_code(Rbld)$
ldisplay(extlst)$
remove(extlst,value)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
the return value is false for an invalid input;
the op() function is used to avoid the use of the ability of the
partition() function to separate the sum of a scalar and base
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
Rbld:2*e1;
op(Rbld);
partition(Rbld,e1);
extlst:extract_code(Rbld)$
ldisplay(extlst)$
remove(extlst,value)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
Rbld:3+e1;
op(Rbld);
partition(Rbld,e1);
extlst:extract_code(Rbld)$
ldisplay(extlst)$
remove(extlst,value)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
this is the the code under test
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
kill(bld);

elst:false$
rscalar:false$
rbase:false$
rblade:false$

if lfreeof(Pvar,Rbld) then 
block(rscalar:true,cord:Rbld,base:1,elst:[rscalar,cord,base])$

if not rscalar then
for jb:1 thru 2^Plen-1 do block(if not rbase then
block(bld:allblds[jb],
if is(equal(Rbld,bld)) then
block(rbase:true,cord:1,base:Rbld,elst:[rscalar,cord,base])))$

if not rscalar and not rbase then
for jb:1 thru 2^Plen-1 do block(if not rbase then
block(bld:allblds[jb],
if is(equal(Rbld,-bld)) then 
block(rbase:true,cord:-1,base:-Rbld,elst:[rscalar,cord,base])))$

if not rscalar and not rbase then
block(opR:op(Rbld),if notequal(opR,"+") then
for jb:1 thru 2^Plen-1 do block(if not rblade then
block(bld:allblds[jb],parted:partition(Rbld,bld),
if parted[2]=bld then 
block(if lfreeof(Pvar,parted[1]) then 
block(rblade:true,cord:parted[1],base:parted[2],elst:[rscalar,cord,base])))))$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
debug final output values from the code under test
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
ldisplay(rscalar,rbase,rblade,elst)$
ldisplay(opR,bld,parted)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
test the function extract() in gafns5.wxm
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
Rbld:ang*e1~e3$
extlst:extract(Rbld)$
ldisplay(Rbld,extlst)$
remove(extlst,value)$
/* [wxMaxima: input   end   ] */

/* Maxima can't load/batch files which end with a comment! */
"Created with wxMaxima"$

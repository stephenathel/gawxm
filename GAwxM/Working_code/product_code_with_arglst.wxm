/* [wxMaxima batch file version 1] [ DO NOT EDIT BY HAND! ]*/
/* [ Created with wxMaxima version 11.08.0 ] */

/* [wxMaxima: comment start ]
product_code_with_arglst.wxm 

GNU General Public License 2013  Stephen Athel Abbott.
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
A test document for Geometric Algebra with wxMaxima
contains...
Initialization
Loading of (intrinsic and GA specific)
Pseudoscalar definition (specifies the space dimension) and
calculation of the inverse pseudoscalar used to generate the dual of a multivector
Enumeration of the standard basis for the specified dimension

Main development of function geomp() in gafns1.wxm
Tests for arglst() code within the geomp() code
Also the source for function geompout() in gafns3.wxm
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
Initialization
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
reset()$
kill(all)$
stardisp:true$
stringdisp:true$
noundisp:true$
simp:true$
dotdistrib:true$
derivabbrev:true$
lispdisp:true$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
load intrinsic (maxima or lisp) function files
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
load("basic")$
load("facexp")$
load("functs")$
load("scifac")$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
batchload GA specific (maxima) function files;
the initialization file, maxima-init.mac is in the /home directory 
and contains the variable, maxima_userdir, and this allows the paths
in file_search_maxima to be extended to point to the GA functions
ldisplay(maxima_userdir)$
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
batchload("gafns0")$
batchload("gafns1")$
batchload("gafns2")$
batchload("gafns3")$
batchload("gafns4")$
batchload("gafns5")$
batchload("gafns6")$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
the pseudoscalar and its inverse
the lowest useable dimension pseudoscalar should be e1~e2 i.e. Plen = 2;
global parameters, Pseudos, Pvar[] and Plen, I and Ii
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
Pseudos:e1~e2~e3$
Pvar:listofvars(Pseudos)$
Plen:length(Pvar)$
I:Pseudos$
ni:(Plen-1)*Plen/2$
Ii:(-1)^ni*I$
kill(ni)$
ldisplay(Pvar,Plen,I,Ii)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
global array parameters 
lstbases[], nbases[], maxnbases
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
array(lstbases,Plen)$
array(nbases,Plen)$
eset:setify(Pvar)$
for ng:1 thru Plen do
block(nbases[ng]:combination(Plen,ng),
lstbases[ng]:full_listify(powerset(eset,ng)))$
maxnbases:(combination(Plen,floor(Plen/2)))$
kill(eset,ng)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
global arrays nbases[] and lstblds[] are used for grader(M) in gafns4.wxm
lstblds[] is an array of lists of blades and allblds[] is a list of all blades
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
array(lstblds,Plen)$
for ng:1 thru Plen do
block(lstb:lstbases[ng],
lstblds[ng]:makelist(list2blade(lst),lst,lstb))$
allblds:[]$
for ng:1 thru Plen do
block(allblds:append(allblds,lstblds[ng]))$
ldisplay(allblds)$
kill(lstb,ng)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
end of Initialization
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
main development for the geometric product with mixed grades similar
to loop calculations in function mvexp()
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
lstgA:[2,3]$
nameA:"A"$
makelistgrademv(nameA,lstgA)$
M:1/2*A&*A;
N:A;
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
these two tests both exercise the code for lenarg=lenlim(=49 for Plen=3), noting that
the scalar part is isolated before this condition is tested
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
lstgA:[1,2,3]$
nameA:"A"$
makelistgrademv(nameA,lstgA)$
M:A;
N:A;
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
lstgA:[0,1,2,3]$
nameA:"A"$
makelistgrademv(nameA,lstgA)$
M:A;
N:A;
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
the geometric product code must also handle simple multivectors, noting that
the scalar part is isolated before 
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
M:(1/2+e1~e2)$
N:(e1/3+e2)$
ldisplay(M,N)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
arrprj:grader(M)$
sM:arrprj[0]$
dm:arrprj[Plen+1]$
remarray(arrprj)$
vM:dm*M-sM$
arrprj:grader(N)$
sN:arrprj[0]$
dn:arrprj[Plen+1]$
remarray(arrprj)$
vN:dn*N-sN$
dmn:dm*dn$
ldisplay(vM,vN,dmn)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
arglst_code(aM):=block([lstargs,opa,eM,ope,mM,opm],
local(lstargs,opa,eM,ope,mM,opm),
if is(atom(aM)) then lstargs:[aM]
else block(opa:op(aM),  
if (opa="~") then lstargs:[aM]
elseif (opa="*") then block(eM:expand(aM),ope:op(eM),
if (ope="*") then lstargs:[aM] else lstargs:args(eM))
elseif (opa="+") then lstargs:args(aM) 
elseif (opa="^") then block(eM:expand(aM),lstargs:args(eM))
elseif (opa="-") then block(mM:-aM,
if is(atom(mM)) then lstargs:[aM]
else block(opm:op(mM),  
if (opm="~") then lstargs:[aM]
elseif (opm="*") then block(eM:expand(mM),ope:op(eM),
if (ope="*") then lstargs:[aM] else lstargs:-args(eM))
elseif (opm="+") then lstargs:-args(mM) 
elseif (opm="^") then block(eM:expand(mM),lstargs:-args(eM))))
else lstargs:[aM]))$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
if is(vM#0) and is(vN#0) then
block(
fvM:facsum(vM,allblds),
lstfvM:arglst_code(fvM),
lenfvM:length(lstfvM),

fvN:facsum(vN,allblds),
lstfvN:arglst_code(fvN),
lenfvN:length(lstfvN),

lenarg:lenfvM*lenfvN,
lstargs:makelist(),

for mr:1 thru lenfvM do
block(for nr:1 thru lenfvN do
block(argmn:lstfvM[mr] . lstfvN[nr],
lstargs:endcons(argmn,lstargs))),

psarg:makelist(),
evarg:makelist(),
for na:1 thru lenarg do
block(str1:string(lstargs[na]),
str2:ssubst("~*"," . ",str1),
str3:ssubst("@*","^^",str2),
psstr:parse_string(str3),
psarg:endcons(psstr,psarg)),
for narg:1 thru lenarg do
block(arg:psarg[narg],eva:ev(arg),
evarg:endcons(eva,evarg)),
R:sum(evarg[n],n,1,lenarg))
else block(lenarg:0,R:0)$

S:sN*vM+sM*vN+sM*sN$

lenlim:(2**Plen-1)**2$

if is(lenarg>=lenlim) then
block(arrR:make_array(any,Plen+2),
arrprj:grader(R),
fillarray(arrR,arrprj),
remarray(arrprj),
arrS:make_array(any,Plen+2),
arrprj:grader(S),
fillarray(arrS,arrprj),
remarray(arrprj),
arrRplusS:make_array(any,Plen+2),
for ng:1 thru Plen do
block(Rgrd:facsum(arrR[ng],lstblds[ng]),
Sgrd:facsum(arrS[ng],lstblds[ng]),
RplusS:Rgrd+Sgrd,
arrRplusS[ng]:facsum(RplusS,lstblds[ng])),
rpluss:arrR[0]+arrS[0],
arrRplusS[0]:facsum(rpluss),
Out:0,
for ng:0 thru Plen do
block(Out:Out+arrRplusS[ng]),
prd:Out/dmn)
else prd:(R+S)/dmn$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
ldisplay(fvM)$
ldisplay(lstfvM)$
ldisplay(fvN)$
ldisplay(lstfvN)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
ldisplay(lstargs)$
ldisplay(str1)$
ldisplay(str3)$
ldisplay(R)$
ldisplay(S)$
ldisplay(lenarg)$
ldisplay(lenlim)$
ldisplay(arrR[4])$
ldisplay(arrS[4])$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
geomp_code(M,N):=block([arrprj,sM,dm,vM,sN,dn,vN,dmn,fvM,fvN,lstfvM,lstfvN,
lenfvM,lenfvN,lenarg,lstargs,argmn,mr,nr,psarg,evarg,na,str1,str2,str3,psstr,narg,
arg,eva,lenlim,R,S,arrR,arrS,arrRplusS,Rgrd,Sgrd,RplusS,rpluss,Out,prd],
local(arrprj,sM,dm,vM,sN,dn,vN,dmn,fvM,fvN,lstfvM,lstfvN,
lenfvM,lenfvN,lenarg,lstargs,argmn,mr,nr,psarg,evarg,na,str1,str2,str3,psstr,narg,
arg,eva,lenlim,R,S,arrR,arrS,arrRplusS,Rgrd,Sgrd,RplusS,rpluss,Out,prd),

arrprj:grader(M),
sM:arrprj[0],
dm:arrprj[Plen+1],
remarray(arrprj),
vM:dm*M-sM,
arrprj:grader(N),
sN:arrprj[0],
dn:arrprj[Plen+1],
remarray(arrprj),
vN:dn*N-sN,
dmn:dm*dn,

if is(vM#0) and is(vN#0) then
block(
fvM:facsum(vM,allblds),
lstfvM:arglst(fvM),
lenfvM:length(lstfvM),

fvN:facsum(vN,allblds),
lstfvN:arglst(fvN),
lenfvN:length(lstfvN),

lenarg:lenfvM*lenfvN,
lstargs:makelist(),

for mr:1 thru lenfvM do
block(for nr:1 thru lenfvN do
block(argmn:lstfvM[mr] . lstfvN[nr],
lstargs:endcons(argmn,lstargs))),

psarg:makelist(),
evarg:makelist(),
for na:1 thru lenarg do
block(str1:string(lstargs[na]),
str2:ssubst("~*"," . ",str1),
str3:ssubst("@*","^^",str2),
psstr:parse_string(str3),
psarg:endcons(psstr,psarg)),
for narg:1 thru lenarg do
block(arg:psarg[narg],eva:ev(arg),
evarg:endcons(eva,evarg)),
R:sum(evarg[n],n,1,lenarg))
else block(lenarg:0,R:0),

S:sN*vM+sM*vN+sM*sN,

lenlim:(2**Plen-1)**2,
if is(lenarg>=lenlim) then
block(arrR:make_array(any,Plen+2),
arrprj:grader(R),
fillarray(arrR,arrprj),
remarray(arrprj),
arrS:make_array(any,Plen+2),
arrprj:grader(S),
fillarray(arrS,arrprj),
remarray(arrprj),
arrRplusS:make_array(any,Plen+2),
for ng:1 thru Plen do
block(Rgrd:facsum(arrR[ng],lstblds[ng]),
Sgrd:facsum(arrS[ng],lstblds[ng]),
RplusS:Rgrd+Sgrd,
arrRplusS[ng]:facsum(RplusS,lstblds[ng])),
rpluss:arrR[0]+arrS[0],
arrRplusS[0]:facsum(rpluss),
Out:0,
for ng:0 thru Plen do
block(Out:Out+arrRplusS[ng]),
prd:Out/dmn)
else prd:(R+S)/dmn)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
MN:geomp_code(M,N)$
ldisplay(MN)$
/* [wxMaxima: input   end   ] */

/* Maxima can't load/batch files which end with a comment! */
"Created with wxMaxima"$

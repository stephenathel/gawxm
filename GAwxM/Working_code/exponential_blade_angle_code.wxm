/* [wxMaxima batch file version 1] [ DO NOT EDIT BY HAND! ]*/
/* [ Created with wxMaxima version 11.08.0 ] */

/* [wxMaxima: comment start ]
exponential_blade_angle_code.wxm

Copyright (C) 2013  Stephen Athel Abbott.
This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
A test document for Geometric Algebra with wxMaxima
contains...
Initialization
Loading of functions (intrinsic and GA specific)
Pseudoscalar definition (specifies the space dimension) and
calculation of the inverse pseudoscalar used to generate the dual of a multivector
Enumeration of the standard basis for the specified dimension

Test the code for function bldexp()
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
Initialization
reset()$
kill(all)$
stardisp:true$
stringdisp:true$
noundisp:true$
simp:true$
dotdistrib:true$
derivabbrev:true;
lispdisp:true;
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
reset()$
kill(all)$
stardisp:true$
stringdisp:true$
noundisp:true$
simp:true$
dotdistrib:true$
derivabbrev:true;
lispdisp:true;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
load intrinsic (maxima or lisp) function files
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
load("basic")$
load("facexp")$
load("functs")$
load("scifac")$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
batchload GA specific (maxima) function files;
the initialization file, maxima-init.mac is in the /home directory 
and contains the variable, maxima_userdir, and this allows the paths
in file_search_maxima to be extended to point to the GA functions
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
ldisplay(maxima_userdir)$
batchload("gafns0")$
batchload("gafns1")$
batchload("gafns2")$
batchload("gafns3")$
batchload("gafns4")$
batchload("gafns5")$
batchload("gafns6")$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
the pseudoscalar and its inverse
the lowest useable dimension pseudoscalar should be e1~e2 i.e. Plen = 2
this text cell would generate a Plen = 4 but the input cell below uses Plen = 3 for clarity
global parameters, Pseudos, Pvar[] and Plen, I and Ii
Pseudos:e1~e2~e3~e4;
Pvar:listofvars(Pseudos);
Plen:length(Pvar)$
I:Pseudos$
ni:(Plen-1)*Plen/2$
Ii:(-1)^ni*I;
kill(ni)$
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
Pseudos:e1~e2~e3;
Pvar:listofvars(Pseudos);
Plen:length(Pvar)$
I:Pseudos$
ni:(Plen-1)*Plen/2$
Ii:(-1)^ni*I;
kill(ni)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
global array parameters 
lstbases[], nbases[], maxnbases
array(lstbases,Plen)$
array(nbases,Plen)$
eset:setify(Pvar)$
for ng:1 thru Plen do
block(nbases[ng]:combination(Plen,ng),
lstbases[ng]:full_listify(powerset(eset,ng)))$
maxnbases:(combination(Plen,floor(Plen/2)));
kill(eset,ng)$
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
array(lstbases,Plen)$
array(nbases,Plen)$
eset:setify(Pvar)$
for ng:1 thru Plen do
block(nbases[ng]:combination(Plen,ng),
lstbases[ng]:full_listify(powerset(eset,ng)))$
maxnbases:(combination(Plen,floor(Plen/2)));
kill(eset,ng)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
global arrays nbases[] and lstblds[] are used for grader(M) in gafns4.wxm
lstblds[] is an array of lists of blades and allblds[] is a list of all blades
array(lstblds,Plen)$
for ng:1 thru Plen do
block(lstb:lstbases[ng],
lstblds[ng]:makelist(list2blade(lst),lst,lstb))$
allblds:[]$
for ng:1 thru Plen do
block(allblds:append(allblds,lstblds[ng]))$
print(allblds)$
kill(lstb,ng)$
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
array(lstblds,Plen)$
for ng:1 thru Plen do
block(lstb:lstbases[ng],
lstblds[ng]:makelist(list2blade(lst),lst,lstb))$
allblds:[]$
for ng:1 thru Plen do
block(allblds:append(allblds,lstblds[ng]))$
print(allblds)$
kill(lstb,ng)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
develop the exponential blade function...
input is any scalar or grade 2 blade (bivector angle) and other inputs should return false
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
ldisplay(lstblds[2])$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
bldexp_code(bld):=block([exlst,scala,theta,base],
local(exlst,scala,theta,base),
exlst:extract(bld),bexp:false,
if notequal(exlst,false) then 
block(scala:exlst[1],theta:exlst[2],base:exlst[3],
if scala then bexp:exp(theta)
else block(if member(base,lstblds[2]) then
bexp:cos(theta)+sin(theta)*base)),
bexp)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
bldexp_code(a+e1);
bldexp_code(0);
bldexp_code(3);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
the output of function extract() is false or a list, [rscalar,cord,base] where rscalar 
is true for a scalar; exlst[] is not passed out of bldexp_code() 
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
extlst:extract(3)$
ldisplay(extlst)$
bldexp_code(3);
ldisplay(exlst)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
function extract() expects as an input, a blade (a scalar * any base), a scalar or 
any signed base
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
bv:s*e1~e3$
extlst:extract(bv)$
ldisplay(extlst)$
bldexp_code(bv);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
s:x*log(a)$
extlst:extract(s)$
ldisplay(extlst)$
bldexp_code(s);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
bldexp_code returns false for some valid output from extract()
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
sb:-e1$
extlst:extract(sb)$
ldisplay(extlst)$
bldexp_code(sb);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
some numerical examples of bivector angles
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
bv:e1~e2*%pi/3$
bldexp_code(bv);
expand(ev(%,numer));
kill(bv)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
theta:%pi/4$
bv:e2~e3$
bldexp_code(bv*theta);
expand(ev(%,numer));
kill(bv,theta)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
and finally test the function bldexp() in file, gafns6.wxm
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
theta:%pi/6$
bv:e1~e3$
bldexp(bv*theta);
expand(ev(%,numer));
kill(bv,theta)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
N.B. it is tempting to retain a bivector angle form independent of any basis by using the 
intrinsic imaginary, %i cannot be removed from wxMaxima although it is not part of GA;
this should be avoided in GAwxM because we cannot proceed very far with just one plane, %i
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
bldexp(e1~e2*theta);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
bldexp() returns false for invalid inputs
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
mv:e1~e2+e3$
extlst:extract(mv)$
ldisplay(extlst)$
bldexp(mv);
/* [wxMaxima: input   end   ] */

/* Maxima can't load/batch files which end with a comment! */
"Created with wxMaxima"$

/* [wxMaxima batch file version 1] [ DO NOT EDIT BY HAND! ]*/
/* [ Created with wxMaxima version 13.04.2 ] */

/* [wxMaxima: comment start ]
cosmic_metric_pressure.wxm

GNU General Public License 2019  Stephen Athel Abbott.
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
An application document for Geometric Algebra using wxMaxima

A cosmic model that uses a simple quasi-flat spacetime metric
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
This file is developed from the file named cosmic_metric_density.wxm; while that file 
used the same metric, we now examine the 'spatial' field equation containing 'pressure'
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
The ctensor package has been loaded within the GAwxM environment on the chance that the
Geometric Algebra may be used at a later stage, so the GA preamble may be ignored. We 
can jump straight to the starting comment ...Start of tensor analysis
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
Initialization
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
ext:["wxm"]$
file_type_maxima:append(ext,file_type_maxima)$
batchload("initialize_fns")$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
the pseudoscalar and its inverse
the lowest useable dimension pseudoscalar should be {e1,e2} i.e. Plen = 2
e.g. for four dimensions edit Pseudos:{e1,e2,e3}$ to Pseudos:{e1,e2,e3,e4}$
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
Pseudos:{e1,e2,e3,e4}$
Pvar:listofvars(Pseudos)$
Plen:length(Pvar)$
I:Pseudos$
ni:(Plen-1)*Plen/2$
Ii:(-1)^ni*I$
kill(ni)$
ldisplay(Pvar)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
batchload("initialize_lsts")$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
end of Initialization
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
set derivabbrev:false$
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
derivabbrev:false$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
ratprint:false$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
The Survey, para.4.1.3
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
show the flat spacetime required for the imitation of G(1,3), where we have used the fourth
axis, e4, for the time axis and the intrinsic maxima imaginary, %i, for the space axes
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
g1:%i*{e1}$
g2:%i*{e2}$
g3:%i*{e3}$
g4:{e4}$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
the spacetime coordinate vector
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
xb:x*g1+y*g2+z*g3+t*g4;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
The Survey, paragraph 4.1.2, suggests a spacetime split using the geometric product, here
that is xb&*g4; we could call this the split spacetime coordinate, splxb
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
splxb:xb&*g4;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
for the actual split into time and space
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
realpart(splxb);
imagpart(splxb);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
in order to unsplit the split spacetime we postmultiply by the inverse of g4 (that also
occurs in the global list, invblds[] as {e4})
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
invg4:g4/normod(g4)^2;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
to recover the spacetime coordinate vector
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
splxb&*invg4;
is(equal(%,xb));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
for any 3D position vector, rb, in a flat spacetime
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
rb:x*{e1}+y*{e2}+z*{e3}$
normrb:normod(rb)$
ldisplay(normrb)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]

   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
Start of tensor analysis for a flat spacetime
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
load(ctensor)$
init_ctensor()$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
for this model of the expanding universe the line element was given by...
ds^2 = -(1+a(t))*(dx^2+dy^2+dz^2)+c^2*(1-b(t))*dt^2
the units are not problematic...dx, dy and dz are in metres while the unknown functions
of time, a(t) and b(t), are dimensionless
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
declare([x,y,z,t],[noun,real]);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
ct_coords:[x,y,z,t];
dim;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
the covariant metric tensor as a matrix
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
mode_declare([function (a)],float)$
mode_declare([function (b)],float)$
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
gs:-(1+a(t))$
gt:+(1-b(t))*c^2$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
form the matrix with diagonal elements, gs and gt (consistent with the imitation of G(1,3))
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
lg:matrix([gs,0,0,0],[0,gs,0,0],[0,0,gs,0],[0,0,0,gt]);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
g:determinant(lg)$
ldisplay(g)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
matrixp(lg);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
the contravariant metric tensor
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
ratmx:true;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
using ug:invert(lg)
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
ug:invert(lg);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
matrixp(ug);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
derivabbrev:true$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
the Christoffel tensor of the second kind
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
rational simplification
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
ratchristof:true$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
the third index is the contravariant index
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
christof(false)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
arrays;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
the mixed Ricci tensor, uric is derived from the covariant Ricci tensor, ric
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
uricci(false)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
arrays;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
lower the contravariant index of the mixed tensor, uric to form the covariant tensor, cric
in the form of a matrix, being more familiar that the array, ric from function ricci()
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
cric:matrix([0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0])$
for mg:1 thru dim do
block(
for ng:1 thru dim do
block(
csum:0,
for kg:1 thru dim do
block(
csum:csum+lg[kg,ng]*uric[mg,kg]),
cric[mg,ng]:csum))$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
matrixp(cric);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
ldisplay(cric[1,1])$
ldisplay(cric[4,4])$
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
calculate the Ricci scalar as the contraction of the covariant Ricci tensor, cric
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
csum:0$
for mg:1 thru dim do
block(
for ng:1 thru dim do
block(
csum:csum+ug[mg,ng]*cric[mg,ng]))$
Rc:csum$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
check against the intrinsic function for the Ricci scalar
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
Ri:scurvature()$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
is(equal(Rc,Ri))$
ldisplay(%)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
use the calculated Ricci scalar, Rc to form R
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
R:facsum(Rc,operator(diff))$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
ldisplay(R)$
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
half the product of the covariant metric tensor and the calculated Ricci scalar
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
hgR:(1/2)*R*lg$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
matrixp(hgR);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
ldisplay(hgR[1,1])$
ldisplay(hgR[4,4])$
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
form the calculated Einstein tensor as a matrix
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
Gc:cric-hgR$
matrixp(Gc);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
form the lhs of the 'spatial' field equation
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
Gs:Gc[1,1]$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
ldisplay(Gs)$
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
Gss:facsum(Gs,operator(diff))$
ldisplay(Gss)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
ldisplay(Gss)$
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
4*gs*gt^2*Gss;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
ratvars;
ratvars(b(t),a(t));
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
facsum(%,diff(a(t),t));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
form the lhs of the 'temporal' field equation
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
Gt:Gc[4,4]$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
ldisplay(Gt)$
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
Gtt:facsum(Gt,operator(diff))$
ldisplay(Gtt)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
form a mixed energy tensor
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
here we just assume that rho contains mass, EM field, energy from gravity and all the rest,
in the units of [kg/m^3] as a mixed tensor 
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
the meaning of 'pressure' is left until later, however, for forming Tm[4,4] below, 
the units of p and rho are different so cannot be summed here
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
ps:-p$
pt:+rho$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
Tm:matrix([ps,0,0,0],[0,ps,0,0],[0,0,ps,0],[0,0,0,pt])$
ldisplay(Tm)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
detTm:determinant(Tm)$
ldisplay(detTm)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
matrixp(Tm);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
lower the contravariant index of the mixed energy tensor, Tm to form the 
covariant energy tensor, Tc in the form of a matrix
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
Tc:matrix([0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0])$
for mg:1 thru dim do
block(
for ng:1 thru dim do
block(
csum:0,
for kg:1 thru dim do
block(
csum:csum+lg[kg,ng]*Tm[mg,kg]),
Tc[mg,ng]:csum))$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
detTc:determinant(Tc)$
ldisplay(detTc)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
matrixp(Tc);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
now all the diagonal elements have the same units! [N/m^2]
the units of p are the same as those of c^2*rho, i.e. [m^2/s^2][kg/m^3]==[N/m^2]
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
ldisplay(Tc)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
form the expression for the 'spatial' field equation with positive sign for kappa in
the equation itself
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
Gss - kappa*Tc[1,1];
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
pre-multiplying will cancel the denominator (including the factor of c^2) when
the expression forms the 'spatial' equation
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
in order to simplify the expression we needed to re-write it by hand, and this needed
to be checked by forming the equivalent expressions named spatial1, spatial2,... etc.
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
spatial1:4*gs*gt^2*(Gss - kappa*Tc[1,1])$
facsum(%,diff(a(t),t));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]

   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
spatial2:2*(1+a(t))*diff(a(t),t)*diff(b(t),t)+
4*(1+a(t))*(1-b(t))*(diff(diff(a(t),t),t)-c^2*kappa*p*((a(t)*b(t))+b(t)-a(t)-1))-
(1-b(t))*diff(a(t),t)^2;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]

   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
spatial3:2*(1+a(t))*diff(a(t),t)*diff(b(t),t)+
4*(1+a(t))*(1-b(t))*(diff(diff(a(t),t),t)+c^2*kappa*p*((1+a(t))*(1-b(t))))-
(1-b(t))*diff(a(t),t)^2;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]

   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
spatial4:expand(%);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]

   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
spatial5:facsum(%,diff(a(t),t));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
confirm that the expressions are all equivalent when equated to zero, and then we can
select the expression named spatial3 as the most concise
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
is(equal(spatial1,c^2*spatial5));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
the current epoch is time zero, where a(0) = b(0) = 0 
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
taking a linear approximation...
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
a(t):=a0*t;
b(t):=b0*t;
sp3:ev(spatial3,diff);
t:0$
equn3:ev(sp3);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
solve for the coefficient, b0
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
float(solve(equn3,b0));
b0:(a0^2-4*c^2*kappa*p)/(2*a0);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
if we can determine a 'pressure' at the current epoch we can find b0 in terms of a0 and p,
but this must come after some dimensional analysis with the second field equation...
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
form the expression for the 'temporal' field equation (again, with a positive sign 
for kappa in the equation itself)
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
Gtt - kappa*Tc[4,4];
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
we identify Hubble's constant (with h replacing 1/(1+a(t))*da(t)/dt) in the field
equations above where h is in m/s/m == 1/s
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
the units of the Einstein tensor must be the same as those of h^2 in the temporal equation
i.e. [1/s^2]; the (almost dimensionless) units of h, (1/s), are usually interpreted as the
measured fractional Hubble expansion per unit time 
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
both a(t) and b(t) can be equated to zero for the observed flat space in the current epoch
and when the energy is dominated by rho the 'pressure' is also set to zero
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
taking rho (and p) as constant and using the values of h and rho for the current epoch,
for the remaining numerical work below, h satisfies the following temporal equation...
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
3/4*h^2-c^2*kappa*rho = 0$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
from the approximation to Poissons equation (elsewhere), kappa*c^2 = 8*pi*G using
Newton's Gravitational constant, G
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
G is in  N m^2/kg^2 
c is in  m/s       
kappa is then in [N s^2/kg^2] or [m/kg]
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
fpprintprec:4$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
find the value of kappa = 8*pi*G/c^2 [m/kg] so kappa*rho is in [1/m^2] and
(kappa*rho*c^2) is in [1/s^2] for rho in [kg/m^3]
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
G:6.67*10^-11$   
c:2.9979*10^8$   
kappa:8*3.14159*G/(c^2);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
quoting (2019) measured values of Hubble's constant from the Gaia and Planck satellites 
in units of km/s/megaparsec
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
h_Gaia:74$
h_Planck:67$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
parsec2metres:150*10^9*3600*180/3.14159$
ldisplay(parsec2metres)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
here we have used Gaia as the more local measurement to find the fractional Hubble 
expansion per unit time in units of [1/s]
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
h:h_Gaia*10^3/(10^6*parsec2metres)$
ldisplay(h)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
repeating the temporal equation above and solving for rho in [kg/m^3]
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
3/4*h^2-c^2*kappa*rho = 0$
float(solve(%,rho));
rho:3/4*h^2/(c^2*kappa);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
just to check the consistency of this set of values and units, re-solve for kappa as kap
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
3/4*h^2-c^2*kap*rho = 0$
float(solve(%,kap));
kap:3/4*h^2/(c^2*rho);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
compare the self-consistent values
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
kap/kappa;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
now re-newing the analysis of the 'spatial' field equation with 'pressure'
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
examine some constituent sources of 'pressure' at the current cmb temperature [deg K]
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
T0:2.73$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
 starting with Stephan's constant in [W/(m^2.K^4)]==[(N.m/s)/(m^2.K^4)]
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
sigma:5.67*10^-8;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
radiation pressure in [(N.m/s)/(m^2.K^4)].[k^4/(m/s)] == [N/m^2]
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
prad:4*sigma*T0^4/(3*c);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Boltzmann's constant in [J/K]
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
k:1.38*10^-23;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
for Hydrogen and Helium use X=3/4 and Y=1/4 for primordial fractions
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
X:3/4$
Y:1/4$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Hydrogen (proton) mass [kg] and mean number density
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
mH:1.67*10^-27;
rho/mH;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
number density for cations in [1/m^3]
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
ni:rho/mH*(X+Y/4);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
number density for electrons (2 electrons from Helium)
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
ne:rho/mH*(X+2*Y/4);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
pressure from ionised gas (not relevant at time zero)
in units of [1/m^3].[J/K].[K] == [N.m/m^3] == [N/m^2]
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
pion:(ne+ni)*k*T0;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
for neutral (un-ionised) Hydrogen and Helium use the gas constant, Rgas
in units of [J/K/kmole)] == [N.m/K/kmole]
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
Rgas:8314;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
one kilomole of Helium has a mass of 4kg, so 1kg is 1/4 kmole 
and rho kg/m^3 == rho/4 kmole/m^3
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
the pressure for each of H and He gas alone
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
pH:X*Rgas*T0*rho;
pHe:Y*Rgas*T0*rho/4;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Dalton's law of partial pressures in [N/m^2]
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
pgas:pH+pHe;
/* [wxMaxima: input   end   ] */

/* Maxima can't load/batch files which end with a comment! */
"Created with wxMaxima"$

/* [wxMaxima batch file version 1] [ DO NOT EDIT BY HAND! ]*/
/* [ Created with wxMaxima version 11.08.0 ] */

/* [wxMaxima: comment start ]
try_to_integrate.wxm

GNU General Public License 2014  Stephen Athel Abbott.
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
A short development document for Geometric Algebra with wxMaxima
just to test some calculus functions within the GAwxM environment,
contains...
Initialization
Loading of functions (intrinsic and GA specific)
Pseudoscalar definition (specifies the space dimension) and
Calculation of the inverse pseudoscalar used to generate the dual of a multivector
Enumeration of the standard basis for the specified dimension

Test integrate(), 'integrate(), changevar(), risch() and 'risch()
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
Initialization
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
reset()$
kill(all)$
stardisp:true$
stringdisp:true$
noundisp:true$
simp:true$
dotdistrib:true$
derivabbrev:true$
lispdisp:true$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
load intrinsic (maxima or lisp) function files
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
load("basic")$
load("facexp")$
load("functs")$
load("scifac")$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
batchload GA specific (maxima) function files;
the initialization file, maxima-init.mac is in the /home directory 
and contains the variable, maxima_userdir, and this allows the paths
in file_search_maxima to be extended to point to the GA functions
ldisplay(maxima_userdir)$
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
batchload("gafns0")$
batchload("gafns1")$
batchload("gafns2")$
batchload("gafns3")$
batchload("gafns4")$
batchload("gafns5")$
batchload("gafns6")$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
the pseudoscalar and its inverse
the lowest useable dimension pseudoscalar should be e1~e2 i.e. Plen = 2
global parameters, Pseudos, Pvar[] and Plen, I and Ii
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
Pseudos:e1~e2~e3$
Pvar:listofvars(Pseudos)$
Plen:length(Pvar)$
I:Pseudos$
ni:(Plen-1)*Plen/2$
Ii:(-1)^ni*I$
kill(ni)$
ldisplay(Pvar,Plen,I,Ii)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
global array parameters 
lstbases[], nbases[], maxnbases
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
array(lstbases,Plen)$
array(nbases,Plen)$
eset:setify(Pvar)$
for ng:1 thru Plen do
block(nbases[ng]:combination(Plen,ng),
lstbases[ng]:full_listify(powerset(eset,ng)))$
maxnbases:(combination(Plen,floor(Plen/2)))$
kill(eset,ng)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
global arrays nbases[] and lstblds[] are used for grader(M) in gafns4.wxm
lstblds[] is an array of lists of blades and allblds[] is a list of all blades
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
array(lstblds,Plen)$
for ng:1 thru Plen do
block(lstb:lstbases[ng],
lstblds[ng]:makelist(list2blade(lst),lst,lstb))$
allblds:[]$
for ng:1 thru Plen do
block(allblds:append(allblds,lstblds[ng]))$
ldisplay(allblds)$
kill(lstb,ng)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
end of Initialization
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
trigsimp fails to simplify but integrate does not
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
integration_constant:'k$
expr:2*cos(x)^2-1$
cs2x:trigsimp(expr)$
J1:integrate(expr,x)$
ldisplay(cs2x,J1)$
kill(expr,J1)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
an old favourite, firstly in noun form, then found
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
expr:a/(a^2+x^2)$
J1:'integrate(expr,x)$
J2:integrate(expr,x)$
ldisplay(J1,J2)$
kill(expr,J1,J2)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
the constant is not used until there is an integral equation
and then the J1 is not displayed by ldisplay()
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
expr:2*cos(x)^2-1 = a/(a^2+x^2)$
J1:integrate(expr,x)$
ldisplay(J1)$
kill(expr,J1)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
another standard form from A' level maths
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
expr:a/(sqrt(a^2-x^2))$
J1:'integrate(expr,x)$
J2:integrate(expr,x)$
ldisplay(J1,J2)$
kill(J1,J2)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
evaluate the above integral with a change of variable using
changevar(expr,f(x,y),y,x) to change the variable from x to y with f(x,y)=0!
then use ev() to evaluate J2 since it inherits its noun form from J1
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
expr:a/(sqrt(a^2-x^2))$
J1:'integrate(expr,x)$
J2:changevar(J1,a*sin(y)-x,y,x)$
J3:ev(J2,nouns)$
ldisplay(J1,J2,J3)$
kill(J1,J2,J3)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
integration of exponentials
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
expr:exp(x^2+y^2)$
J1:'integrate(expr,y)$
J2:'integrate(J1,x)$
J3:ev(J2,nouns)$
ldisplay(J1,J2,J3)$
kill(J1,J2,J3)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
trying the same with function risch() still in noun form
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
expr:exp(x^2+y^2)$
J1:'risch(expr,y)$
J2:'risch(J1,x)$
J3:ev(J2,nouns)$
ldisplay(J1,J2,J3)$
kill(J1,J2,J3)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
and the same without the noun form
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
expr:exp(x^2+y^2)$
J1:risch(expr,y)$
J2:risch(J1,x)$
ldisplay(J1,J2)$
kill(J1,J2)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
erfflag=false prevents risch() from displaying a form containing the error function, erf();
since %i does not belong within GA, instead we can obtain a product of real integrals
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
erfflag:false$ 
expr:exp(x^2+y^2)$
J1:risch(expr,y)$
J2:risch(J1,x)$
J3:ev(J2,nouns)$
ldisplay(J1,J2,J3)$
kill(J1,J2,J3)$
/* [wxMaxima: input   end   ] */

/* Maxima can't load/batch files which end with a comment! */
"Created with wxMaxima"$

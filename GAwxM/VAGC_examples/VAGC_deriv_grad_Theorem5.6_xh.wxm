/* [wxMaxima batch file version 1] [ DO NOT EDIT BY HAND! ]*/
/* [ Created with wxMaxima version 11.08.0 ] */

/* [wxMaxima: comment start ]
VAGC_deriv_grad_Theorem5.6_xh.wxm

GNU General Public License 2016  Stephen Athel Abbott.
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
A short development document for Geometric Algebra with wxMaxima
just to test some calculus functions within the GAwxM environment,
contains...
Initialization
Loading of functions (intrinsic and GA specific)
Pseudoscalar definition (specifies the space dimension) and
Calculation of the inverse pseudoscalar used to generate the dual of a multivector
Enumeration of the standard basis for the specified dimension

Theorem 5.6, VAGC page 59 to show how the directional derivative is related to the
gradient using the vector notation for the direction, h and the coordinate, x
Also indicates how a gradient operator may be formed
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
Initialization
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
reset()$
kill(all)$
stardisp:true$
stringdisp:true$
noundisp:true$
simp:true$
dotdistrib:true$
derivabbrev:true$
lispdisp:true$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
load intrinsic (maxima or lisp) function files
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
load("basic")$
load("facexp")$
load("functs")$
load("scifac")$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
batchload GA specific (maxima) function files;
the initialization file, maxima-init.mac is in the /home directory 
and contains the variable, maxima_userdir, and this allows the paths
in file_search_maxima to be extended to point to the GA functions
ldisplay(maxima_userdir)$
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
batchload("gafns0")$
batchload("gafns1")$
batchload("gafns2")$
batchload("gafns3")$
batchload("gafns4")$
batchload("gafns5")$
batchload("gafns6")$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
batchload GC specific (maxima) function files;
the paths in file_search_maxima are also extended to point to the GC functions
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
batchload("gcfns1")$
batchload("gcfns2")$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
the pseudoscalar and its inverse
the lowest useable dimension pseudoscalar should be e1~e2 i.e. Plen = 2
global parameters, Pseudos, Pvar[] and Plen, I and Ii
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
Pseudos:e1~e2~e3$
Pvar:listofvars(Pseudos)$
Plen:length(Pvar)$
I:Pseudos$
ni:(Plen-1)*Plen/2$
Ii:(-1)^ni*I$
kill(ni)$
ldisplay(Pvar,Plen,I,Ii)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
global array parameters 
lstbases[], nbases[], maxnbases
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
array(lstbases,Plen)$
array(nbases,Plen)$
eset:setify(Pvar)$
for ng:1 thru Plen do
block(nbases[ng]:combination(Plen,ng),
lstbases[ng]:full_listify(powerset(eset,ng)))$
maxnbases:(combination(Plen,floor(Plen/2)))$
kill(eset,ng)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
global arrays nbases[] and lstblds[] are used for grader(M) in gafns4.wxm
lstblds[] is an array of lists of blades and allblds[] is a list of all blades
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
array(lstblds,Plen)$
for ng:1 thru Plen do
block(lstb:lstbases[ng],
lstblds[ng]:makelist(list2blade(lst),lst,lstb))$
allblds:[]$
for ng:1 thru Plen do
block(allblds:append(allblds,lstblds[ng]))$
ldisplay(allblds)$
kill(lstb,ng)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
find the inverse of the canonical basis as a global list, invblds[], like allblds
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
invblds:[]$
for k:1 thru Plen do
block(ni:k*(k-1)/2,
nk:(-1)^ni,
lst:nk*lstblds[k],
invblds:append(invblds,lst))$
ldisplay(invblds)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
end of Initialization
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
set derivabbrev:false$
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
derivabbrev:false$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Theorem 5.6,
VAGC page 59
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
coefficients of the vector, h
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
hlst:[h1,h2,h3,0,0,0,0]$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
coefficients of the vector, x
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
xlst:[x1,x2,x3,0,0,0,0]$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
form the coordinate and direction vectors from the lists of coefficients
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
eJ:allblds$
lenlst:2^Plen-1$
x:0$
h:0$
for j:1 thru lenlst do
block(x:x+xlst[j]*eJ[j],
h:h+hlst[j]*eJ[j])$
ldisplay(x,h)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
form a function, f(x) 
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
f(x):=x&*(x+3)$
fx:ev(f(x))$
ldisplay(fx)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
use the function mvderiv() to form Dhf(x)
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
fstr:"f(x)"$
derivf:mvderiv(fstr,xlst,hlst)$
ldisplay(derivf)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
evaluate the directional derivative of f(x) without using the calculated value, fx
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
Dhf:ev(derivf,diff)$
ldisplay(Dhf)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
confirm that the calculated directional derivative is related to the gradient 
by Equation 5.2
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
use the function mvgrad() to form the gradient of g, as yet undefined
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
fstr:"g"$
gradg:mvgrad(fstr,xlst)$
ldisplay(gradg)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
if the inner product code for &. treats the above gradient as a sum of terms of the form 
base &* (scalar), then the gradient operator, gradg, may be used like a vector
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
form (h.grad)g
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
hinnergrad:h&.gradg;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
evaluate (h.grad)g for g=f(x)
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
g:f(x)$
lhs:ev(hinnergrad,diff)$
ldisplay(lhs)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
confirm one of the equalities in Equation 5.2
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
is(equal(lhs,Dhf));
/* [wxMaxima: input   end   ] */

/* Maxima can't load/batch files which end with a comment! */
"Created with wxMaxima"$

/* [wxMaxima batch file version 1] [ DO NOT EDIT BY HAND! ]*/
/* [ Created with wxMaxima version 11.08.0 ] */

/* [wxMaxima: comment start ]
lhs_equals_rhs_changevar_bf.wxm

GNU General Public License 2017  Stephen Athel Abbott.
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
A development document for Geometric Algebra with wxMaxima
to test the vector calculus functions within the GAwxM environment,
contains...
Initialization
Loading of functions (intrinsic and GA specific)
Pseudoscalar definition (specifies the space dimension) and
Calculation of the inverse pseudoscalar used to generate the dual of a multivector
Enumeration of the standard basis for the specified dimension

To confirm the equality of...
Integration over a region of the surface defined by an inverted (convex) 
paraboloid using the (vector) derivative of a vector function on the surface (manifold)
i.e. the left hand side (lhs) of the fundamental theory of geometric calculus
with...
Integration over the boundary of a region of the surface defined by an inverted (convex) 
paraboloid using the line integral of a vector function on a set of boundary curves
i.e. the right hand side (rhs) of the equation for the fundamental theory
because...
we would like to show a particular numerical example of the Fundamental Theorem
also, where the lhs integration makes use of a change of variable using the intrinsic
maxima changevar() function with a more complex vector function, bf 
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
Initialization
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
reset()$
kill(all)$
stardisp:true$
stringdisp:true$
noundisp:true$
simp:true$
dotdistrib:true$
derivabbrev:true$
lispdisp:true$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
load intrinsic (maxima or lisp) function files
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
load("basic")$
load("facexp")$
load("functs")$
load("scifac")$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
batchload GA specific (maxima) function files;
the initialization file, maxima-init.mac is in the /home directory 
and contains the variable, maxima_userdir, and this allows the paths
in file_search_maxima to be extended to point to the GA functions
ldisplay(maxima_userdir)$
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
batchload("gafns0")$
batchload("gafns1")$
batchload("gafns2")$
batchload("gafns3")$
batchload("gafns4")$
batchload("gafns5")$
batchload("gafns6")$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
batchload GC specific (maxima) function files;
the paths in file_search_maxima are also extended to point to the GC functions
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
batchload("gcfns1")$
batchload("gcfns2")$
batchload("gcfns3")$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
the pseudoscalar and its inverse
the lowest useable dimension pseudoscalar should be e1~e2 i.e. Plen = 2
global parameters, Pseudos, Pvar[] and Plen, I and Ii
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
Pseudos:e1~e2~e3$
Pvar:listofvars(Pseudos)$
Plen:length(Pvar)$
I:Pseudos$
ni:(Plen-1)*Plen/2$
Ii:(-1)^ni*I$
kill(ni)$
ldisplay(Pvar,Plen,I,Ii)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
global array parameters 
lstbases[], nbases[], maxnbases
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
array(lstbases,Plen)$
array(nbases,Plen)$
eset:setify(Pvar)$
for ng:1 thru Plen do
block(nbases[ng]:combination(Plen,ng),
lstbases[ng]:full_listify(powerset(eset,ng)))$
maxnbases:(combination(Plen,floor(Plen/2)))$
kill(eset,ng)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
global arrays nbases[] and lstblds[] are used for grader(M) in gafns4.wxm
lstblds[] is an array of lists of blades and allblds[] is a list of all blades
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
array(lstblds,Plen)$
for ng:1 thru Plen do
block(lstb:lstbases[ng],
lstblds[ng]:makelist(list2blade(lst),lst,lstb))$
allblds:[]$
for ng:1 thru Plen do
block(allblds:append(allblds,lstblds[ng]))$
ldisplay(allblds)$
kill(lstb,ng)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
find the inverse of the canonical basis as a global list, invblds[], like allblds
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
invblds:[]$
for k:1 thru Plen do
block(ni:k*(k-1)/2,
nk:(-1)^ni,
lst:nk*lstblds[k],
invblds:append(invblds,lst))$
ldisplay(invblds)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
end of Initialization
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
set derivabbrev:false$
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
derivabbrev:false$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
using the (M)anifold functions found in file gcfns3.wxm,
we must find the left hand side (lhs) of the integral equation
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
parameterize an inverted (convex) paraboloid surface and find the basis
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
bx:u*e1+v*e2-(u*u+v*v)*e3$
bu:diff(bx,u)$
bv:diff(bx,v)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
find the reciprocal of the basis
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
tgtbasis:['bu,'bv]$
rectgt:reciprocM(tgtbasis)$
b1:rectgt[1]$
b2:rectgt[2]$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
define the vector function on the surface...
bf:u*bu$
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
bf:(u^2+v)*bu+(2*u+v^2)*bv$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
form the vector derivative; "vector del" &* "vector bf" = bivector + scalar
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
bfstr:"bf"$
parlst:[u,v]$
reclst:['b1,'b2]$
ldisplay(parlst,reclst)$
vectordelM(bfstr,parlst,reclst);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
ev(%)$
delbf:facsum(%,allblds)$
ldisplay(delbf)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
this is the anticlockwise bivector tangent to the convex paraboloid
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
bubv:bu&^bv$
ldisplay(bubv)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
now we need a double integral over u=[1,2],v=[-1,+1] with boundary curves u=1,2 and v=+/-1
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
first form the integrand, integ, of the left hand side (lhs) of the fundamental theorem 
and grade the geometric product
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
bubv&*delbf$
facsum(%,allblds)$
integ:grader(%)$
deninteg:integ[Plen+1]$
scalarinteg:integ[0]/deninteg$
integ[2]/deninteg$
bivecinteg:facsum(%,allblds)$
ldisplay(scalarinteg,bivecinteg)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
recombine the two and display the double integral
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
lhsinteg:scalarinteg+bivecinteg$
J1:'integrate(lhsinteg,v)$
J2:'integrate(J1,u)$
ldisplay(J2)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
for the inner part of the iterated integral
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
J1lhs:'integrate(lhsinteg,v)$
ldisplay(J1lhs)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
using a functional method to evaluate the first integral at the limits
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
expr:ev(J1lhs,nouns)$
define(J1fuv(u,v),expr)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
J1upper:J1fuv(u,+1);
J1lower:J1fuv(u,-1);
J2integ:J1upper-J1lower;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
J2lhs:'integrate(J2integ,u)$
ldisplay(J2lhs)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
to demonstrate a change of variable from u to y with f(u,y)=2*u+1-y=0 
using a functional method to evaluate the limits of the new variable, y
N.B. intrinsic function solve() outputs a list of 1 equation for y and the variable expruy
is used both in function solve() and in function changevar()
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
expruy:2*u+1-y$
ylst:solve([expruy],[y]);
ylst[1];
expru:subst(%,y);
define(limfu(u),expru)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
evaluate the limits of the new variable at the limits u=1,2
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
uupp:2$
upperlim:limfu(uupp);
ulow:1$
lowerlim:limfu(ulow);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
apply the change of variable viz. intrinsic maxima function changevar();
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
J2ch:changevar(J2lhs,expruy,y,u)$
ldisplay(J2ch)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
application of a simple change of variable has created an integrand, polynomial in y
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
perform the indefinite integration
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
expr:ev(J2ch,nouns)$
ldisplay(expr)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
again, use another functional method to evaluate the definite integral at the limits 
of the new variable
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
define(J2fy(y),expr)$
J2upper:J2fy(upperlim);
J2lower:J2fy(lowerlim);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
J2upper-J2lower$
ev(%,numer)$
Jlhs:expand(%);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
now we must find the right hand side (rhs) of the integral equation
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
the lhs needed a double integral over u=[1,2],v=[-1,+1] for the region, M
the rhs needs line integrals over four boundary curves, dM; u=1,2 and v=+/-1 
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
the direction of the curves must be clockwise from above; here they are taken in sequence 
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
u=1, v=[-1,+1]
v=1, u=[+1,+2]
u=2, v=[+1,-1]
v=-1,u=[+2,+1]
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
line
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
exprbx:bx$
define(bxf(u,v),exprbx);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
and the same expression, from above, for the vector function on the surface
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
exprbf:bf$
define(bfuv(u,v),exprbf);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
bxf(1,v)$
diff(%,v);
integ1:%&*bfuv(1,v)$
facsum(%,allblds)$
Jp1:'integrate(%,v,-1,+1);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
bxf(u,1)$
diff(%,u)$
integ2:%&*bfuv(u,1)$
facsum(%,allblds)$
Jp2:'integrate(%,u,1,2);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
bxf(2,v);
diff(%,v);
integ3:%&*bfuv(2,v)$
facsum(%,allblds);
Jp3:'integrate(%,v,+1,-1);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
bxf(u,-1)$
diff(%,u)$
integ4:%&*bfuv(u,-1)$
facsum(%,allblds)$
Jp4:'integrate(%,u,2,1);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
ev(Jp1,nouns);
ev(Jp2,nouns);
ev(Jp3,nouns);
ev(Jp4,nouns);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
this has some redundant lines (for more complex examples)
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
Jp:Jp1+Jp2+Jp3+Jp4$
ev(Jp,nouns)$
facsum(%,allblds)$
Jrhs:ev(%,numer)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
and finally test for equality
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
is(equal(Jlhs,Jrhs))$
ldisplay(%,Jlhs,Jrhs)$
/* [wxMaxima: input   end   ] */

/* Maxima can't load/batch files which end with a comment! */
"Created with wxMaxima"$

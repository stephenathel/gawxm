/* [wxMaxima batch file version 1] [ DO NOT EDIT BY HAND! ]*/
/* [ Created with wxMaxima version 11.08.0 ] */

/* [wxMaxima: comment start ]
lhs_pseudo_integral_over_M.wxm

GNU General Public License 2017  Stephen Athel Abbott.
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
A development document for Geometric Algebra with wxMaxima
to test the vector calculus functions within the GAwxM environment,
contains...
Initialization
Loading of functions (intrinsic and GA specific)
Pseudoscalar definition (specifies the space dimension) and
Calculation of the inverse pseudoscalar used to generate the dual of a multivector
Enumeration of the standard basis for the specified dimension

Integration over a region of the surface defined by an inverted (convex) 
paraboloid using the (vector) derivative of a vector function on the surface (manifold)
i.e. the lhs of the equation for the fundamental theory of geometric calculus
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
the name of this file contains the word "pseudo" because we have not used the unit
pseudoscalar for the bivector in the surface integral; 
the results from this file should be compared with those from the file named
rhs_pseudo_integral_over_dM.wxm
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
Initialization
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
reset()$
kill(all)$
stardisp:true$
stringdisp:true$
noundisp:true$
simp:true$
dotdistrib:true$
derivabbrev:true$
lispdisp:true$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
load intrinsic (maxima or lisp) function files
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
load("basic")$
load("facexp")$
load("functs")$
load("scifac")$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
batchload GA specific (maxima) function files;
the initialization file, maxima-init.mac is in the /home directory 
and contains the variable, maxima_userdir, and this allows the paths
in file_search_maxima to be extended to point to the GA functions
ldisplay(maxima_userdir)$
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
batchload("gafns0")$
batchload("gafns1")$
batchload("gafns2")$
batchload("gafns3")$
batchload("gafns4")$
batchload("gafns5")$
batchload("gafns6")$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
batchload GC specific (maxima) function files;
the paths in file_search_maxima are also extended to point to the GC functions
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
batchload("gcfns1")$
batchload("gcfns2")$
batchload("gcfns3")$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
the pseudoscalar and its inverse
the lowest useable dimension pseudoscalar should be e1~e2 i.e. Plen = 2
global parameters, Pseudos, Pvar[] and Plen, I and Ii
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
Pseudos:e1~e2~e3$
Pvar:listofvars(Pseudos)$
Plen:length(Pvar)$
I:Pseudos$
ni:(Plen-1)*Plen/2$
Ii:(-1)^ni*I$
kill(ni)$
ldisplay(Pvar,Plen,I,Ii)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
global array parameters 
lstbases[], nbases[], maxnbases
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
array(lstbases,Plen)$
array(nbases,Plen)$
eset:setify(Pvar)$
for ng:1 thru Plen do
block(nbases[ng]:combination(Plen,ng),
lstbases[ng]:full_listify(powerset(eset,ng)))$
maxnbases:(combination(Plen,floor(Plen/2)))$
kill(eset,ng)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
global arrays nbases[] and lstblds[] are used for grader(M) in gafns4.wxm
lstblds[] is an array of lists of blades and allblds[] is a list of all blades
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
array(lstblds,Plen)$
for ng:1 thru Plen do
block(lstb:lstbases[ng],
lstblds[ng]:makelist(list2blade(lst),lst,lstb))$
allblds:[]$
for ng:1 thru Plen do
block(allblds:append(allblds,lstblds[ng]))$
ldisplay(allblds)$
kill(lstb,ng)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
find the inverse of the canonical basis as a global list, invblds[], like allblds
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
invblds:[]$
for k:1 thru Plen do
block(ni:k*(k-1)/2,
nk:(-1)^ni,
lst:nk*lstblds[k],
invblds:append(invblds,lst))$
ldisplay(invblds)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
end of Initialization
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
set derivabbrev:false$
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
derivabbrev:false$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
using the (M)anifold functions found in file gcfns3.wxm
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
parameterize an inverted (convex) paraboloid surface and find the basis
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
bx:u*e1+v*e2-(u*u+v*v)*e3$
bu:diff(bx,u)$
bv:diff(bx,v)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
find the reciprocal of the basis
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
tgtbasis:['bu,'bv]$
rectgt:reciprocM(tgtbasis)$
b1:rectgt[1]$
b2:rectgt[2]$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
define the vector function on the surface...
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
bf:u*bu$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
form the vector derivative; "vector del" &* "vector bf" = bivector + scalar
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
bfstr:"bf"$
parlst:[u,v]$
reclst:['b1,'b2]$
ldisplay(parlst,reclst)$
vectordelM(bfstr,parlst,reclst);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
ev(%)$
delbf:facsum(%,allblds)$
ldisplay(delbf)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
We would like to show a particular numerical example of the Fundamental Theorem of GC
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
VAGC page 129
Directed Integral
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
this is the anticlockwise bivector tangent to the convex paraboloid
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
bubv:bu&^bv$
dbx:bubv/normod(bubv)$
ldisplay(dbx)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
as an aside, the normal may be the dual
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
nhat:dbx&*Ii;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
now we need a double integral over u=[1,2],v=[-1,+1] with boundary curves u=1,2 and v=+/-1
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
first form the integrand, integ, of the left hand side (lhs) of the fundamental theorem 
and grade the geometric product
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
bubv&*delbf$
facsum(%,allblds)$
integ:grader(%)$
deninteg:integ[Plen+1]$
scalarinteg:integ[0]/deninteg$
integ[2]/deninteg$
bivecinteg:facsum(%,allblds)$

ldisplay(scalarinteg,bivecinteg)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
recombine the two and display the double integral
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
lhsi:scalarinteg+bivecinteg$
J1:'integrate(lhsi,v)$
J2:'integrate(J1,u)$
ldisplay(J1,J2)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
firstly, just taking the bivector part of the integrand
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
J1biv:'integrate(bivecinteg,v)$
ldisplay(J1biv)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
expr:ev(J1biv,nouns)$
define(J1fuv(u,v),expr)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
the (intrinsic) integrate function only handles real limits so it is useful to develop
a functional method to evaluate at the limits
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
J1upper:J1fuv(u,+1);
J1lower:J1fuv(u,-1);
J2integ:J1upper-J1lower;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
J2biv:'integrate(J2integ,u)$
ldisplay(J2biv)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
to demonstrate an easy change of variable from u to y with f(u,y)=2*u-y=0
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
J2ch:changevar(J2biv,2*u+1-y,y,u)$
ldisplay(J2ch)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
expr:ev(J2ch,nouns)$
ldisplay(expr)$
define(J2fy(y),expr)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
the limits u=1,2 become y=3,5
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
J2upper:J2fy(5);
J2lower:J2fy(3);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
Jbiv:J2upper-J2lower$
ev(Jbiv,numer)$
expand(%);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
now evaluating the scalar part of the integral over u=[1,2],v=[-1,+1]
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
J1sca:'integrate(scalarinteg,v)$
J2sca:'integrate(J1sca,u)$
ldisplay(J1sca,J2sca)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
use a defined function to evaluate at the limits
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
expr:ev(J1sca,nouns)$
define(J1fuv(u,v),expr);
J1upper:J1fuv(u,+1);
J1lower:J1fuv(u,-1);
J2integ:J1upper-J1lower;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
J2sca:'integrate(J2integ,u)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
expr:ev(J2sca,nouns)$
define(J2fu(u),expr);
J2upper:J2fu(2);
J2lower:J2fu(1);
J2:J2upper-J2lower;
/* [wxMaxima: input   end   ] */

/* Maxima can't load/batch files which end with a comment! */
"Created with wxMaxima"$

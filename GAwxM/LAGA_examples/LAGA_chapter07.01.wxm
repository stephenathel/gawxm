/* [wxMaxima batch file version 1] [ DO NOT EDIT BY HAND! ]*/
/* [ Created with wxMaxima version 11.08.0 ] */

/* [wxMaxima: comment start ]
LAGA_chapter07.01.wxm (LAGA examples)

Copyright (C) 2013  Stephen Athel Abbott.
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
A test document for Geometric Algebra with wxMaxima
contains...
Initialization
Loading of functions (intrinsic and GA specific)
Pseudoscalar definition (specifies the space dimension) and
calculation of the inverse pseudoscalar used to generate the dual of a multivector
Enumeration of the standard basis for the specified dimension

Project in the geometric algebra, G3
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
Reference book...Linear and Geometric Algebra (LAGA)
by Alan Macdonald
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
Initialization
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
reset()$
kill(all)$
stardisp:true$
stringdisp:true$
noundisp:true$
simp:true$
dotdistrib:true$
derivabbrev:true$
lispdisp:true$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
load intrinsic (maxima or lisp) function files
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
load("basic")$
load("facexp")$
load("functs")$
load("scifac")$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
batchload GA specific (maxima) function files;
the initialization file, maxima-init.mac is in the /home directory 
and contains the variable, maxima_userdir, and this allows the paths
in file_search_maxima to be extended to point to the GA functions
ldisplay(maxima_userdir)$
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
batchload("gafns0")$
batchload("gafns1")$
batchload("gafns2")$
batchload("gafns3")$
batchload("gafns4")$
batchload("gafns5")$
batchload("gafns6")$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
the pseudoscalar and its inverse
the lowest useable dimension pseudoscalar should be e1~e2 i.e. Plen = 2;
global parameters, Pseudos, Pvar[] and Plen, I and Ii
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
Pseudos:e1~e2~e3$
Pvar:listofvars(Pseudos)$
Plen:length(Pvar)$
I:Pseudos$
ni:(Plen-1)*Plen/2$
Ii:(-1)^ni*I$
kill(ni)$
ldisplay(Pvar,Plen,I,Ii)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
global array parameters 
lstbases[], nbases[], maxnbases
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
array(lstbases,Plen)$
array(nbases,Plen)$
eset:setify(Pvar)$
for ng:1 thru Plen do
block(nbases[ng]:combination(Plen,ng),
lstbases[ng]:full_listify(powerset(eset,ng)))$
maxnbases:(combination(Plen,floor(Plen/2)))$
kill(eset,ng)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
global arrays nbases[] and lstblds[] are used for grader(M) in gafns4.wxm
lstblds[] is an array of lists of blades and allblds[] is a list of all blades
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
array(lstblds,Plen)$
for ng:1 thru Plen do
block(lstb:lstbases[ng],
lstblds[ng]:makelist(list2blade(lst),lst,lstb))$
allblds:[]$
for ng:1 thru Plen do
block(allblds:append(allblds,lstblds[ng]))$
ldisplay(allblds)$
kill(lstb,ng)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
end of Initialization
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
Exercise 7.4.
page 120
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
for the arbitrary vector ab(old) in terms of the coordinates (x,y,z)
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
ab:x*e1+y*e2+z*e3$
ldisplay(ab)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
define the plane as a bivector using the given vectors
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
ub:e1+2*e2$
vb:e2+4*e3$
B:ub&^vb$
ldisplay(B)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
imposing the subspace membership (zero) condition gives the equation of the plane
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
ab&^B$
facsum(%,allblds);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Exercise 7.5.
page 121
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
define the blades
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
A:e2&*(e1+e3)$
B:e1~*e2$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
find the inverse of the blade, B  as Bm1 (B to the power -1)
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
Bm1:mvrev(B)/normod(B)^2$
ldisplay(Bm1)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
find the projection of blade A onto blade B as P = (A.B)/B
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
P:(A&.B)&*Bm1$
ldisplay(P)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Exercise 7.10.
page 123
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
define the blades
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
A:e1&*(e2+e3)$
B:e1~*e2$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
find the cosine of the angle between the blades A and B as |(A.B)|/|A||B|
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
normod(A&.B)/(normod(A)*normod(B))$
theta:acos(%)$
ldisplay(theta)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Exercise 7.11.
page 123
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
define blade A as the vector, ab
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
ab:e1+e3$
A:ab$
B:e1~*e2$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
find the cosine of the angle between the blades A and B again using Eq.(7.10)
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
normod(A&.B)/(normod(A)*normod(B))$
theta:acos(%)$
ldisplay(theta)$
/* [wxMaxima: input   end   ] */

/* Maxima can't load/batch files which end with a comment! */
"Created with wxMaxima"$

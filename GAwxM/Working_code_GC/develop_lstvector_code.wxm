/* [wxMaxima batch file version 1] [ DO NOT EDIT BY HAND! ]*/
/* [ Created with wxMaxima version 11.08.0 ] */

/* [wxMaxima: comment start ]
develop_lstvector_code.wxm

GNU General Public License 2019  Stephen Athel Abbott.
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
A development document for Geometric Algebra using wxMaxima
contains...
Initialization with
Pseudoscalar definition (specifies the space dimension)

preparation of a coordinate or parametric multivector containing only grade 1 components;
used as input to function mvgrad(), mvdiv() and mvcurl() in gcfns1.wxm
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
Initialization
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
ext:["wxm"]$
file_type_maxima:append(ext,file_type_maxima)$
batchload("initialize_fns")$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
the pseudoscalar and its inverse
the lowest useable dimension pseudoscalar should be {e1,e2} i.e. Plen = 2
e.g. for four dimensions edit Pseudos:{e1,e2,e3}$ to Pseudos:{e1,e2,e3,e4}$
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
Pseudos:{e1,e2,e3}$
Pvar:listofvars(Pseudos)$
Plen:length(Pvar)$
I:Pseudos$
ni:(Plen-1)*Plen/2$
Ii:(-1)^ni*I$
kill(ni)$
ldisplay(Pvar)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
batchload("initialize_lsts")$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
end of Initialization
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
set derivabbrev:false$
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
derivabbrev:false$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
survey page 19, Section 3.1
the Fourier expansion (Section 2.3.7), has a summation over J and may have 2^Plen terms
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
the derivative with respect to the grade zero term of the coordinate has been excluded,
and our lists, allblds and invblds, exclude the unit of the basis so our index, j will
only run from 1 to 2^Plen-1
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
lenlst:2^Plen-1$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
use string concatenation to develop code to form a multivector component list containing
zero components for grades other than the unit vector grade;
then form a coordinate or parametric multivector containing only grade 1 components
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
str:"c"$
lst:[]$
for j:1 thru Plen do
block(
ndxstr:string(j),
xstr:sconcat(str,ndxstr),
xcrd:parse_string(xstr),
lst:endcons(xcrd,lst))$

for j:Plen+1 thru lenlst do
block(
xcrd:0,
lst:endcons(xcrd,lst))$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
coefficients of the non-zero grades of the 'coordinate' multivector(vector), c
e.g. lst=[c1,c2,c3,0,0,0,0]$
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
xlst:lst$
ldisplay(xlst)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
the global list invblds[] is found using VAGC, Exercise 6.7, page 99
the inverse basis used in the Fourier expansion, Survey, Section 2.3.7,
is eJm1 (eJ to minus 1)
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
eJ:allblds$ 
eJm1:invblds$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
form the coordinate multivector from the list of coefficients
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
c:0$
for j:1 thru lenlst do
block(c:c+lst[j]*eJ[j])$
ldisplay(c)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
create a simple function of the coordinate multivector
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
x:c$
F(x):=x&*({e1}+{e2,e3})$
ev(F(x))$
F:facsum(%,allblds)$
ldisplay(F)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
for the multivector G using function mvgrad()
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
Gstr:"G"$
gradG:mvgrad(Gstr,xlst)$
ldisplay(gradG)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
G:F$
ev(gradG,diff);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
form the function lstvector_code() to find a multivector component list containing
zero components for grades other than the unit vector grade
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
lstvector_code(str):=block([lenlst,lst,j,ndxstr,xstr,xcrd],
local(lenlst,lst,j,ndxstr,xstr,xcrd),
lenlst:2^Plen-1,
lst:[],
for j:1 thru Plen do
block(
ndxstr:string(j),
xstr:sconcat(str,ndxstr),
xcrd:parse_string(xstr),
lst:endcons(xcrd,lst)),
for j:Plen+1 thru lenlst do
block(
xcrd:0,
lst:endcons(xcrd,lst)),lst)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
form the function makevector_code() to find the coordinate multivector from 
the list of (multi)vector coefficients
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
makevector_code(clst):=block([lenlst,eJ,c,j],
local(lenlst,eJ,c,j),
lenlst:2^Plen-1,
eJ:allblds,
c:0,
for j:1 thru lenlst do
block(c:c+clst[j]*eJ[j]),c)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
for the multivector H using function mvgrad() in file gcfns1.wxm
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
ystr:"y"$
ylst:lstvector_code(ystr)$
ldisplay(ylst)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
y:makevector_code(ylst)$
ldisplay(y)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
Hstr:"H"$
gradH:mvgrad(Hstr,ylst)$
ldisplay(gradH)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
H(y):=y&*({e1}+{e2,e3})$
ev(H(y))$
H:facsum(%,allblds)$
ldisplay(H)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
ev(gradH,diff);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
now use function lstvector() and function makevector() in file gcfns2.wxm to do the same
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
zstr:"z"$
zlst:lstvector(zstr)$
ldisplay(zlst)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
z:makevector(zlst)$
ldisplay(z)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
Fstr:"F"$
gradF:mvgrad(Fstr,zlst)$
ldisplay(gradF)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
F(z):=z&*({e1}+{e2,e3})$
ev(F(z))$
F:facsum(%,allblds)$
ldisplay(F)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
ev(gradF,diff);
/* [wxMaxima: input   end   ] */

/* Maxima can't load/batch files which end with a comment! */
"Created with wxMaxima"$

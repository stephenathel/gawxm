/* [wxMaxima batch file version 1] [ DO NOT EDIT BY HAND! ]*/
/* [ Created with wxMaxima version 11.08.0 ] */

/* [wxMaxima: comment start ]
develop_mvcurl_code.wxm

GNU General Public License 2019  Stephen Athel Abbott.
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
A development document for Geometric Algebra using wxMaxima
contains...
Initialization with
Pseudoscalar definition (specifies the space dimension)

use string concatenation with 'diff() to develop code to calculate the curl 
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
Initialization
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
ext:["wxm"]$
file_type_maxima:append(ext,file_type_maxima)$
batchload("initialize_fns")$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
the pseudoscalar and its inverse
the lowest useable dimension pseudoscalar should be {e1,e2} i.e. Plen = 2
e.g. for four dimensions edit Pseudos:{e1,e2,e3}$ to Pseudos:{e1,e2,e3,e4}$
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
Pseudos:{e1,e2,e3}$
Pvar:listofvars(Pseudos)$
Plen:length(Pvar)$
I:Pseudos$
ni:(Plen-1)*Plen/2$
Ii:(-1)^ni*I$
kill(ni)$
ldisplay(Pvar)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
batchload("initialize_lsts")$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
end of Initialization
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
set derivabbrev:false$
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
derivabbrev:false$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
survey page 19, Section 3.1
the Fourier expansion (Section 2.3.7), has a summation over J and may have 2^Plen terms
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
the derivative with respect to the grade zero term of the coordinate has been excluded,
and our lists, allblds and invblds, exclude the unit of the basis so our index, j will
only run from 1 to 2^Plen-1
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
attempt to form a curl of multivector F, just for Plen=3
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
coefficients of the non-zero grades of the 'coordinate' multivector, C
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
Clst:[c1,c2,c3,c4,c5,c6,c7]$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
the global list invblds[] is found using VAGC, Exercise 6.7, page 99
the inverse basis used in the Fourier expansion, Survey, Section 2.3.7,
is eJm1 (eJ to minus 1)
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
eJ:allblds$ 
eJm1:invblds$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
form the coordinate multivector from the list of coefficients
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
lenlst:2^Plen-1$
C:0$
for j:1 thru lenlst do
block(C:C+Clst[j]*eJ[j])$
ldisplay(C)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
create a simple function of the coordinate multivector
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
F(C):=3*C&*C$
F:ev(F(C))$
ldisplay(F)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
define DelFstr for each non-zero coordinate with string concatenation followed by parsing
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
Fstr:"F"$
DelFstr:""$
for j:1 thru lenlst do
block(
crd:Clst[j],
if not crd=0 then
block(ejm1:eJm1[j],
ejstr:string(ejm1),
crdstr:string(crd),
dstr:sconcat("'diff(",Fstr,",",crdstr,")"),
DelFstr:sconcat(DelFstr,"+",ejstr,"&^",dstr)),
DelF:parse_string(DelFstr))$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
ldisplay(dstr,DelFstr)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
ldisplay(DelF)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
ev(DelF,diff);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
form the function mvcurl() to find an expression for the curl of any multivector
expression given as a string; this can then be evaluated, given the multivector values
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
mvcurl_code(Fstr,Clst):=block([j,lenlst,crd,ejm1,ejstr,crdstr,dstr,DelFstr,DelF],
local(j,lenlst,crd,ejm1,ejstr,crdstr,dstr,DelFstr,DelF),
DelFstr:"",
lenlst:2^Plen-1,
for j:1 thru lenlst do
block(
crd:Clst[j],
if not crd=0 then
block(ejm1:invblds[j],
ejstr:string(ejm1),
crdstr:string(crd),
dstr:sconcat("'diff(",Fstr,",",crdstr,")"),
DelFstr:sconcat(DelFstr,"+",ejstr,"&^",dstr)),
DelF:parse_string(DelFstr)),DelF)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
for the multivector G using function mvcurl_code() above
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
Gstr:"G"$
curlG:mvcurl_code(Gstr,Clst)$
ldisplay(curlG)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
G:F$
ev(curlG,diff);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
for the multivector H using function mvcurl() in file gcfns1.wxm
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
Hstr:"H"$
curlH:mvcurl(Hstr,Clst)$
ldisplay(curlH)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
H:F$
ev(curlH,diff);
/* [wxMaxima: input   end   ] */

/* Maxima can't load/batch files which end with a comment! */
"Created with wxMaxima"$

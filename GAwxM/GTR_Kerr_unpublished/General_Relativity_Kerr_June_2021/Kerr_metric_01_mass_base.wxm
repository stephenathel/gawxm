/* [wxMaxima batch file version 1] [ DO NOT EDIT BY HAND! ]*/
/* [ Created with wxMaxima version 11.04.0 ] */

/* [wxMaxima: comment start ]
Kerr_metric_01_mass_base.wxm

GNU General Public License 2021  Stephen Athel Abbott.
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
An application document for Geometric Algebra using wxMaxima

The original 1963 Kerr metric (using R(3,1)) taken from the paper...
Discovering the Kerr and Kerr–Schild metrics
Roy Patrick Kerr (2008);

includes the transformation: r+u=-t applied to Equn 1.25 for ds squared;
simplify and merge the code from files...
Kerr_metric_01_base.wxm and
Kerr_metric_01_mass.wxm 
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
This file is developed from the file named ctensor_calc_Einstein.wxm. That file used 
ctensor functions christof() and uricci() to calculate the Ricci tensor, Ricci scalar
and hence the covariant Einstein tensor from a user defined covariant metric tensor
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
The ctensor package has been loaded within the GAwxM environment on the chance that the
Geometric Algebra may be used at a later stage, so the GA preamble may be ignored. We 
can jump straight to the starting comment ...Start of tensor analysis
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
Initialization
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
ext:["wxm"]$
file_type_maxima:append(ext,file_type_maxima)$
batchload("initialize_fns")$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
the pseudoscalar and its inverse
the lowest useable dimension pseudoscalar should be {e1,e2} i.e. Plen = 2
e.g. for four dimensions edit Pseudos:{e1,e2,e3}$ to Pseudos:{e1,e2,e3,e4}$
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
Pseudos:{e1,e2,e3,e4}$
Pvar:listofvars(Pseudos)$
Plen:length(Pvar)$
I:Pseudos$
ni:(Plen-1)*Plen/2$
Ii:(-1)^ni*I$
kill(ni)$
ldisplay(Pvar)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
batchload("initialize_lsts")$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
end of Initialization
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
set derivabbrev:false$
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
derivabbrev:false$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
ratprint:false$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Start of tensor analysis for a rotating black hole
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
load(ctensor)$
init_ctensor()$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
for this model the line element was originally given in terms of (r,theta,phi,u),
although phi and u only appear as coordinate differences;
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
declare([r,theta,phi,u],[noun,real]);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Equation 1.26 from R.P.Kerr (1963)
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
ds2:(r^2+a^2*cos(theta)^2)*(dth2+(sin(theta)^2*dphi^2))-
(2*dr+du-a*sin(theta)^2*dphi)*(du+a*sin(theta)^2*dphi);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
expand(ds2);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
identify the angular coordinate differences within the original Kerr metric
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
ds2K:facsum(%,dphi,dth2);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
the Kerr-Schild metric shows confocal ellipsoids with the z-axis as rotation axis;
the derivation from Kerr includes transformations: r*cos(theta)=z and r+u=-t
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
here, to begin with, we just use (r+u=-t) dr+du=-dt (for ds zero squared)
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
declare([t],[noun,real])$
equnK:ds2K$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
[du=-dt-dr]$
subst(%,[equnK]);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
simplify the coefficient of dphi^2
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
trigsimp(%);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
recover the coefficient of dtheta squared, maybe use dontfactor:[dr,dt];
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
facsum(%,dth2,dphi);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
identify the radial and time coordinate differences
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
expandwrt(%,dr,dt);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
extract the expression from the output list of the subst() function
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
%[1];
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
manually rewrite (copy and paste) the result above (check)
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
-dth2*(a^2*sin(theta)^2-r^2-a^2)+dphi^2*(r^2+a^2)*sin(theta)^2-2*a*dphi*dr*
sin(theta)^2-dt^2+dr^2$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
manually simplify the dtheta squared coefficient (check)
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
ds2Kt:
+dth2*(r^2+a^2*cos(theta)^2)
+dphi^2*(r^2+a^2)*sin(theta)^2
-2*a*dphi*dr*sin(theta)^2
-dt^2+dr^2$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
initialize the intrinsic relativity tensor functions in ctensor
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
ct_coords:[r,theta,phi,t];
dim;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
the covariant metric tensor as a matrix;
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
read off and name both the diagonal and off-diagonal elements from ds2Kt, for a 
symmetric metric tensor (check)
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
g11:+1$
g22:(r^2+a^2*cos(theta)^2)$
g33:(r^2+a^2)*sin(theta)^2$
g44:-1$
g13:-2*a*sin(theta)^2;
g31:-2*a*sin(theta)^2;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
form the matrix l(ower)g
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
lg_base:matrix([g11,0,g13,0],[0,g22,0,0],[g31,0,g33,0],[0,0,0,g44]);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
matrixp(lg_base);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
merge the code from Kerr_metric_01_mass.wxm
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
Equation 1.25 from R.P.Kerr (1963), just the mass term;
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
ds2:2*m*r*(du+a*sin(theta)^2*dphi)^2/(r^2+a^2*cos(theta)^2);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
identify the angular coordinate difference within the mass term
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
ds2K:facsum(%,dphi,du);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
here, to begin with, we just use (r+u=-t) dr+du=-dt
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
declare([t],[noun,real])$
equnK:ds2K$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
[du=-dt-dr]$
subst(%,[equnK]);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
extract the expression from the output list of the subst() function;
also isolate the denominator;
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
ds2mass:%[1]$
numds2:num(ds2mass);
dends2:denom(ds2mass);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
identify the radial and time coordinate differences
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
expandwrt(numds2,dr,dt);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
manually rewrite (copy and paste) the result above (check)
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
2*a^2*dphi^2*m*r*sin(theta)^4-4*a*dphi*dt*m*r*sin(theta)^2-4*a*dphi*dr*m*r*
sin(theta)^2+2*dt^2*m*r+4*dr*dt*m*r+2*dr^2*m*r$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
manually rewrite the numerator (check), ready to read off 
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
ds2num:
+2*a^2*dphi^2*m*r*sin(theta)^4
-4*a*dphi*dt*m*r*sin(theta)^2
-4*a*dphi*dr*m*r*sin(theta)^2
+2*dt^2*m*r
+4*dr*dt*m*r
+2*dr^2*m*r$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
initialize the intrinsic relativity tensor functions in ctensor
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
ct_coords:[r,theta,phi,t];
dim;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
the second part of the covariant metric tensor as a matrix;
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
read off and name both the diagonal and off-diagonal elements from ds2num, for the 
symmetric tensor derived from the mass term (check)
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
g11:+2*m*r$
g22:+0$
g33:+2*a^2*m*r*sin(theta)^4$
g44:+2*m*r$
g13:-4*a*m*r*sin(theta)^2$
g31:-4*a*m*r*sin(theta)^2$
g43:-4*a*m*r*sin(theta)^2$
g34:-4*a*m*r*sin(theta)^2$
g14:+4*m*r$
g41:+4*m*r$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
form the matrix l(ower)g
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
lg_mass_num:matrix([g11,0,g13,g14],[0,g22,0,0],[g31,0,g33,g34],[g41,0,g43,g44]);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
matrixp(lg_mass_num);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
prepare to merge with Kerr_metric_01_base.wxm remembering the denominator
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
lg_mass:1/dends2*lg_mass_num;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
the determinant of the matrix is zero so the second term alone does not give a metric
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
determinant(lg_mass);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
add the two symmetric matrices, firstly finding a numerator (lg_mass is unused)
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
dends2*lg_base+lg_mass_num$
lg:%/dends2;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
the determinant of the summed metric
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
determinant(lg)$
g:rat(%);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
the contravariant metric tensor, u(pper)g
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
use ug:invert(lg) for ctensor functions
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
invert(lg)$
ug:rat(%);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
matrixp(ug);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
derivabbrev:true$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
the Christoffel tensor of the second kind
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
rational simplification
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
ratchristof:true$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
the third index is the contravariant index
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
christof(false)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
arrays;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
the mixed Ricci tensor, uric is derived from the covariant Ricci tensor, ric
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
uricci(false)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
arrays;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
lower the contravariant index of the mixed tensor, uric to form the covariant tensor, cric
in the form of a matrix, being more familiar that the array, ric from function ricci()
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
cric:matrix([0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0])$
for mg:1 thru dim do
block(
for ng:1 thru dim do
block(
csum:0,
for kg:1 thru dim do
block(
csum:csum+lg[kg,ng]*uric[mg,kg]),
cric[mg,ng]:csum))$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
matrixp(cric);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
ldisplay(cric[4,3])$
ldisplay(cric[4,4])$
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
calculate the Ricci scalar as the contraction of the covariant Ricci tensor, cric
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
csum:0$
for mg:1 thru dim do
block(
for ng:1 thru dim do
block(
csum:csum+ug[mg,ng]*cric[mg,ng]))$
Rc:csum$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
check against the intrinsic function for the Ricci scalar
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
Ri:scurvature()$

is(equal(Rc,Ri))$
ldisplay(%)$
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
use the calculated Ricci scalar, Rc to form R
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
R:facsum(Rc,operator(diff))$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
ldisplay(R)$
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
half the product of the covariant metric tensor and the calculated Ricci scalar
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
hgR:(1/2)*R*lg$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
matrixp(hgR);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
ldisplay(hgR[1,1])$
ldisplay(hgR[4,4])$
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
form the calculated Einstein tensor as a matrix
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
Gc:cric-hgR$
matrixp(Gc);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
num_Gc:num(Gc)$
den_Gc:denom(Gc);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
form the lhs of the 'spatial radial' field equation
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
Gs:rat(Gc[1,1]);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
apply a truncation
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
ratweight(a,1)$
ratwtlvl:5$
Gss:1*Gs;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
form the lhs of the 'temporal' field equation
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
Gt:rat(Gc[4,4]);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
ratweight(a,1,r,1)$
ratwtlvl:6$
Gtt:1*Gt;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
Gtp:rat(Gc[4,3]);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
ratweight(a,1,r,1)$
ratwtlvl:6$
Gtphi:1*Gtp;
/* [wxMaxima: input   end   ] */

/* Maxima can't load/batch files which end with a comment! */
"Created with wxMaxima"$

/* [wxMaxima batch file version 1] [ DO NOT EDIT BY HAND! ]*/
/* [ Created with wxMaxima version 11.04.0 ] */

/* [wxMaxima: comment start ]
Kerr_spherical_Schwarz.wxm

GNU General Public License 2021  Stephen Athel Abbott.
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
An application document for Geometric Algebra using wxMaxima

The Kerr metric (using R(3,1)) taken from the paper...
Discovering the Kerr and Kerr–Schild metrics
Roy Patrick Kerr (2008);

The elements of the metric are read off from the separation formula, Equn 1.25 
using Equn 1.26 for ds0^2 (what Kerr has called the base metric);
Kerr originally split the line element into 'base' and 'mass' formulae;
We transform these two line elements separately for clarity and then 
sum the two matrices to give the Kerr metric in spherical coordinates; 
The transformation: r+u=-t applied to Equn 1.25 for ds squared;
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
The ctensor package has been loaded within the GAwxM environment on the chance that the
Geometric Algebra may be used at a later stage, so the GA preamble may be ignored. We 
can jump straight to the starting comment ...Start of tensor analysis
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
Initialization
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
ext:["wxm"]$
file_type_maxima:append(ext,file_type_maxima)$
batchload("initialize_fns")$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
the pseudoscalar and its inverse
the lowest useable dimension pseudoscalar should be {e1,e2} i.e. Plen = 2;
e.g. for four dimensions edit Pseudos:{e1,e2,e3}$ to Pseudos:{e1,e2,e3,e4}$
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
Pseudos:{e1,e2,e3,e4}$
Pvar:listofvars(Pseudos)$
Plen:length(Pvar)$
I:Pseudos$
ni:(Plen-1)*Plen/2$
Ii:(-1)^ni*I$
kill(ni)$
ldisplay(Pvar)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
batchload("initialize_lsts")$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
end of Initialization
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
set derivabbrev:false$
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
derivabbrev:false$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
ratprint:false$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Start of tensor analysis for a rotating black hole
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
load(ctensor)$
init_ctensor()$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
the line element is given by...
the base term (Equ 1.26) + the mass term (part of Equn 1.25)
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
for this model the line element was originally given in terms of (r,theta,phi,u),
although phi and u only appear as coordinate differences;
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
declare([r,theta,phi,u],[noun,real])$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Equation 1.26 from R.P.Kerr (2008)
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
ds2:(r^2+a^2*cos(theta)^2)*(dth2+(sin(theta)^2*dphi^2))-
(2*dr+du-a*sin(theta)^2*dphi)*(du+a*sin(theta)^2*dphi);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
expand(ds2);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
identify the angular coordinate differences within the original Kerr metric
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
ds2K:facsum(%,dphi,dth2);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
the Kerr-Schild metric shows confocal ellipsoids with the z-axis as rotation axis;
the derivation from Kerr includes transformations: r*cos(theta)=z and r+u=-t
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
here, to begin with, we just use (r+u=-t) dr+du=-dt (for ds zero squared)
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
declare([t],[noun,real])$
equnK:ds2K$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
[du=-dt-dr]$
subst(%,[equnK])$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
simplify the coefficient of dphi^2
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
trigsimp(%)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
recover the coefficient of dtheta squared;
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
facsum(%,dth2,dphi)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
identify the radial and time coordinate differences
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
expandwrt(%,dr,dt)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
extract the expression from the output list of the subst() function
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
ds2subst:%[1];
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
manually rewrite (copy and paste) the result above
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
-dth2*(a^2*sin(theta)^2-r^2-a^2)+dphi^2*(r^2+a^2)*sin(theta)^2-2*a*dphi*dr*
sin(theta)^2-dt^2+dr^2;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
manually simplify the dtheta squared coefficient and rewrite the 
output above (copy, paste and separate the terms vertically)
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
ds2Kt:
+dth2*(r^2+a^2*cos(theta)^2)
+dphi^2*(r^2+a^2)*sin(theta)^2
-2*a*dphi*dr*sin(theta)^2
-dt^2
+dr^2$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
confirm that the manual simplification gives an eqivalent coefficient for dth2
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
is(equal(trigsimp(coeff(ds2subst,dth2,1)),coeff(ds2Kt,dth2,1)));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
confirm that the rewrite gives the same coefficients for dphi^2 and dphi
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
is(equal(coeff(ds2subst,dphi,2),coeff(ds2Kt,dphi,2)));
is(equal(coeff(ds2subst,dphi,1),coeff(ds2Kt,dphi,1)));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
inspect the coefficients of dt^2 and dr^2
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
initialize the intrinsic relativity tensor functions in ctensor
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
ct_coords:[r,theta,phi,t];
dim;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
the base metric tensor as a matrix;
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
read off and name both the diagonal and off-diagonal elements from ds2Kt, for a 
symmetric base metric (check)
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
g11:+1$
g22:(r^2+a^2*cos(theta)^2)$
g33:(r^2+a^2)*sin(theta)^2$
g44:-1$
g13:-2*a*sin(theta)^2;
g31:-2*a*sin(theta)^2;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
form the matrix lg_base
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
lg_base:matrix([g11,0,g13,0],[0,g22,0,0],[g31,0,g33,0],[0,0,0,g44]);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
matrixp(lg_base);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]

   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
prepare to find the line element due to the mass term;
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
kill(ds2,lg,g)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Equation 1.25 (part) from R.P.Kerr (2008)
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
ds2:2*m*r*(du+a*sin(theta)^2*dphi)^2/(r^2+a^2*cos(theta)^2);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
identify the angular coordinate difference within the mass term
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
ds2K:facsum(%,dphi,du)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
here, to begin with, we just use (r+u=-t) dr+du=-dt
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
declare([t],[noun,real])$
equnK:ds2K$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
[du=-dt-dr]$
subst(%,[equnK])$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
extract the expression from the output list of the subst() function;
also isolate the denominator and numerator;
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
ds2mass:%[1]$
numds2:num(ds2mass)$
dends2:denom(ds2mass);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
identify the radial and time coordinate differences
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
expandwrt(numds2,dr,dt);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
manually rewrite (copy and paste) the result above
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
2*a^2*dphi^2*m*r*sin(theta)^4-4*a*dphi*dt*m*r*sin(theta)^2-4*a*dphi*dr*m*r*
sin(theta)^2+2*dt^2*m*r+4*dr*dt*m*r+2*dr^2*m*r;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
reformat the numerator to help reading off the metric elements due to the mass term
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
ds2num:
+2*a^2*dphi^2*m*r*sin(theta)^4
-4*a*dphi*dt*m*r*sin(theta)^2
-4*a*dphi*dr*m*r*sin(theta)^2
+2*dt^2*m*r
+4*dr*dt*m*r
+2*dr^2*m*r$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
confirm that the reformat gives the same expression for the numerator
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
is(equal(%,numds2));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
re-initialize the intrinsic relativity tensor functions in ctensor
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
init_ctensor()$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
ct_coords:[r,theta,phi,t];
dim;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
the second part of the metric as a matrix;
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
read off and name both the diagonal and off-diagonal elements from ds2num, for the 
symmetric tensor derived from the mass term (check)
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
g11:+2*m*r$
g22:+0$
g33:+2*a^2*m*r*sin(theta)^4$
g44:+2*m*r$
g13:-4*a*m*r*sin(theta)^2$
g31:-4*a*m*r*sin(theta)^2$
g43:-4*a*m*r*sin(theta)^2$
g34:-4*a*m*r*sin(theta)^2$
g14:+4*m*r$
g41:+4*m*r$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
form the matrix lg_mass_num, a matrix of numerators
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
lg_mass_num:matrix([g11,0,g13,g14],[0,g22,0,0],[g31,0,g33,g34],[g41,0,g43,g44]);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
matrixp(lg_mass_num);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
prepare to add the two matrices, remembering the denominator
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
lg_mass:1/dends2*lg_mass_num;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
matrixp(lg_mass);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
re-declare the spherical coordinates
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
init_ctensor()$
ct_coords:[r,theta,phi,t];
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
add the two symmetric matrices, firstly finding a numerator (lg_mass is unused),
then dividing by the denominator;
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
dends2*lg_base+lg_mass_num$
lg:%/dends2$
expand(%)$
trigsimp(%);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
wxMaxima has allowed a substitution [a=0] into the entire metric matrix;
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
The formula for the static Kerr metric in R(3,1) is...
ds^2=(1+2*m/r)*dr^2+(8*m/r)*dr*dt-(1-2*m/r)*dt^2;
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
For r=2*m, ds^2=2*dr^2+4*dr*dt
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
[a=0]$
subst(%,[lg])$
%[1]$
expand(%);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
An inspection of the Kerr metric in spherical coordinates;
N.B. this is the very first look at just the two main terms of the metric 
for a=0 (zero rotation);
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
the dr^2 element, 1+2m/r, is algebraic (no approximation); 
it only occurs in the Schwarzschild metric after the binomial 
approximation to the singular quotient, (1-2m/r)^-1; 
this does seem to favour Kerr's derivation;
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
lgdr2:lg[1,1];
[a=0]$
subst(%,[lgdr2]);
%[1]$
expand(%);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
the dt^2 element is also algebraic; it is identical to that of the 
Schwarzschild metric;
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
lgdt2:lg[4,4];
[a=0]$
subst(%,[lgdt2]);
%[1]$
expand(%);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]

   [wxMaxima: comment end   ] */

/* Maxima can't load/batch files which end with a comment! */
"Created with wxMaxima"$

/* [wxMaxima batch file version 1] [ DO NOT EDIT BY HAND! ]*/
/* [ Created with wxMaxima version 11.08.0 ] */

/* [wxMaxima: comment start ]
geometric_product_syntax.wxm

GNU General Public License 2018  Stephen Athel Abbott.
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
A test document for Geometric Algebra with wxMaxima
contains...
Initialization
Loading of functions (intrinsic and GA specific)
Pseudoscalar definition (specifies the space dimension) and
calculation of the inverse pseudoscalar used to generate the dual of a multivector
Enumeration of the standard basis for the specified dimension

Explanation of the 'tilda' infix operator
Examples of syntax and precedence of the infix geometric product operators, i.e. the 
geometric inner product, the geometric outer product and the geometric product itself
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
Initialization
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
reset()$
kill(all)$
stardisp:true$
stringdisp:true$
noundisp:true$
simp:true$
dotdistrib:true$
derivabbrev:true$
lispdisp:true$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
load intrinsic (maxima or lisp) function files
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
load("basic")$
load("facexp")$
load("functs")$
load("scifac")$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
batchload GA specific (maxima) function files;
the initialization file, maxima-init.mac is in the /home directory 
and contains the variable, maxima_userdir, and this allows the paths
in file_search_maxima to be extended to point to the GA functions
ldisplay(maxima_userdir)$
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
batchload("gafns0")$
batchload("gafns1")$
batchload("gafns2")$
batchload("gafns3")$
batchload("gafns4")$
batchload("gafns5")$
batchload("gafns6")$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
the pseudoscalar and its inverse
the lowest useable dimension pseudoscalar should be e1~e2 i.e. Plen = 2
global parameters, Pseudos, Pvar[] and Plen, I and Ii
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
Pseudos:e1~e2~e3$
Pvar:listofvars(Pseudos)$
Plen:length(Pvar)$
I:Pseudos$
ni:(Plen-1)*Plen/2$
Ii:(-1)^ni*I$
kill(ni)$
ldisplay(Pvar,Plen,I,Ii)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
global array parameters 
lstbases[], nbases[], maxnbases
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
array(lstbases,Plen)$
array(nbases,Plen)$
eset:setify(Pvar)$
for ng:1 thru Plen do
block(nbases[ng]:combination(Plen,ng),
lstbases[ng]:full_listify(powerset(eset,ng)))$
maxnbases:(combination(Plen,floor(Plen/2)))$
kill(eset,ng)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
global arrays nbases[] and lstblds[] are used for grader(M) in gafns4.wxm
lstblds[] is an array of lists of blades and allblds[] is a list of all blades
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
array(lstblds,Plen)$
for ng:1 thru Plen do
block(lstb:lstbases[ng],
lstblds[ng]:makelist(list2blade(lst),lst,lstb))$
allblds:[]$
for ng:1 thru Plen do
block(allblds:append(allblds,lstblds[ng]))$
ldisplay(allblds)$
kill(lstb,ng)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
end of Initialization
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
definition and precedence of the infix operators is found in gafns0.wxm so that document
should be opened and used as a reference when studying the values of the expressions below
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
'tilda' has the highest precedence; it is a binary operator and serves only to bind the 
ascending base vectors into blades and expressions such as e1~e1 and e3~e2 should not occur;
'tilda' is an infix operator and does not have an associated binary infix function; it is 
used to form the higher order blades of the algebra basis in function list2blade();
'tilda' is left associative, and binary, so the interpreter brackets pairs of ascending 
base vectors when forming blades and these may be later resolved by removing the brackets;
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
the geometric product operators and their functions are as taken from gafns0.wxm...
"&*"(A,B):=geomp(A,B);
"&^"(A,B):=geompout(A,B);
"&."(A,B):=geompinn(A,B);
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
the geometric product operators all have a precedence less than 'tilda' so that the base 
vectors remain bound to each other as bivectors in the evaluation of the expressions below;
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
e1~e2&*e3;
e1~e2&^e3;
e1&*e2~e3;
e1&^e2~e3;
e1&.e1~e2;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
geometric and geometric outer product syntax and precedence using the scalar, a
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
the geometric product operators have a higher precedence than scalar multiplication so
the leading a*, without the parentheses, never enters the geometric product code
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
a*e1~e2&*e2~e3;
(a*e1~e2)&*e2~e3;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
a*e1~e2&^e3;
(a*e1~e2)&^e3;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
when there is equal precedence, the order of execution is left to right; if it were
otherwise the values of the three expressions below would be zero
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
e1~e2&*e2~e3&^e2;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
e1~e2&^e3&*e2;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
e1~e2&.e1~e2&*e2;
/* [wxMaxima: input   end   ] */

/* Maxima can't load/batch files which end with a comment! */
"Created with wxMaxima"$

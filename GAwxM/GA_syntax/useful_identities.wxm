/* [wxMaxima batch file version 1] [ DO NOT EDIT BY HAND! ]*/
/* [ Created with wxMaxima version 11.08.0 ] */

/* [wxMaxima: comment start ]
useful_identities.wxm

GNU General Public License 2013  Stephen Athel Abbott.
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
A short development document for Geometric Algebra with wxMaxima
taking its name from section 5 of the published paper...
A Survey of Geometric Algebra and Geometric Calculus (the Survey)
contains...
Initialization
Loading of functions (intrinsic and GA specific)
Pseudoscalar definition (specifies the space dimension) and
Calculation of the inverse pseudoscalar used to generate the dual of a multivector
Enumeration of the standard basis for the specified dimension

Check that the code is consistent with the identities at the end of 'the Survey'
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
Initialization
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
reset()$
kill(all)$
stardisp:true$
stringdisp:true$
noundisp:true$
simp:true$
dotdistrib:true$
derivabbrev:true$
lispdisp:true$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
load intrinsic (maxima or lisp) function files
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
load("basic")$
load("facexp")$
load("functs")$
load("scifac")$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
batchload GA specific (maxima) function files;
the initialization file, maxima-init.mac is in the /home directory 
and contains the variable, maxima_userdir, and this allows the paths
in file_search_maxima to be extended to point to the GA functions
ldisplay(maxima_userdir)$
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
batchload("gafns0")$
batchload("gafns1")$
batchload("gafns2")$
batchload("gafns3")$
batchload("gafns4")$
batchload("gafns5")$
batchload("gafns6")$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
the pseudoscalar and its inverse
the lowest useable dimension pseudoscalar should be e1~e2 i.e. Plen = 2
global parameters, Pseudos, Pvar[] and Plen, I and Ii
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
Pseudos:e1~e2~e3$
Pvar:listofvars(Pseudos)$
Plen:length(Pvar)$
I:Pseudos$
ni:(Plen-1)*Plen/2$
Ii:(-1)^ni*I$
kill(ni)$
ldisplay(Pvar,Plen,I,Ii)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
global array parameters 
lstbases[], nbases[], maxnbases
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
array(lstbases,Plen)$
array(nbases,Plen)$
eset:setify(Pvar)$
for ng:1 thru Plen do
block(nbases[ng]:combination(Plen,ng),
lstbases[ng]:full_listify(powerset(eset,ng)))$
maxnbases:(combination(Plen,floor(Plen/2)))$
kill(eset,ng)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
global arrays nbases[] and lstblds[] are used for grader(M) in gafns4.wxm
lstblds[] is an array of lists of blades and allblds[] is a list of all blades
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
array(lstblds,Plen)$
for ng:1 thru Plen do
block(lstb:lstbases[ng],
lstblds[ng]:makelist(list2blade(lst),lst,lstb))$
allblds:[]$
for ng:1 thru Plen do
block(allblds:append(allblds,lstblds[ng]))$
ldisplay(allblds)$
kill(lstb,ng)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
end of Initialization
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
Some of the identities of Section 5 of 'the Survey' are grouped and separated from
the next identity by a blank line and they are un-numbered so we need to reference 
the identity or group of identities with a number
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
firstly create three full grade multivectors
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
nameA:"A"$
makemultivec(nameA);
nameB:"B"$
makemultivec(nameB);
nameC:"C"$
makemultivec(nameC);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
the first identity is a strong test of the left inner product code;
it can take several seconds to run
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
lhs:A&.(B&.C)$
rhs:(A&^B)&.C$
is(equal(lhs,rhs));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
next using the full multivector, B;
for blades Ab(old) and Cb(old), when Ab is a subspace of Cb, Ab~^Cb=0;
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
ldisplay(B)$
Ab:a*e1$
Cb:c*e1~e2$
ldisplay(Ab,Cb)$
subspacetest:Ab~^Cb$
ldisplay(subspacetest)$
lhs:(Ab&.B)&.Cb$
rhs:Ab&^(B&.Cb)$
ldisplay(lhs,rhs)$
is(equal(lhs,rhs));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
miss out the third identity group
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
for the fourth identity, make four vectors (a, b, c, and d) to form a scalar identity
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
lstga:[1]$
namea:"a"$
makelistgrademv(namea,lstga);
lstgb:[1]$
nameb:"b"$
makelistgrademv(nameb,lstgb);
lstgc:[1]$
namec:"c"$
makelistgrademv(namec,lstgc);
lstgd:[1]$
named:"d"$
makelistgrademv(named,lstgd);
lhs:(a&^b)&.(c&^d)$
rhs:(a&.d)*(b&.c)-(a&.c)*(b&.d)$
is(equal(lhs,rhs));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
for the fifth identity group, just choose the second identity
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
lhs:a&.(b&*c)$
rhs:(a&.b)*c-(a&.c)*b$
is(equal(lhs,rhs));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
for the sixth identity group, just choose the second identity
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
lhs:a&.(b&^c)$
rhs:(a&.b)*c-(a&.c)*b$
is(equal(lhs,rhs));
/* [wxMaxima: input   end   ] */

/* Maxima can't load/batch files which end with a comment! */
"Created with wxMaxima"$

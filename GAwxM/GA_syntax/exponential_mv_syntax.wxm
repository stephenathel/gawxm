/* [wxMaxima batch file version 1] [ DO NOT EDIT BY HAND! ]*/
/* [ Created with wxMaxima version 12.04.0 ] */

/* [wxMaxima: comment start ]
exponential_mv_syntax.wxm

GNU General Public License 2019  Stephen Athel Abbott.
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
A test document for Geometric Algebra with wxMaxima
contains...
Initialization
Loading of functions (intrinsic and GA specific)
Pseudoscalar definition (specifies the space dimension) and
calculation of the inverse pseudoscalar used to generate the dual of a multivector
Enumeration of the standard basis for the specified dimension

Indicate the usage of the input parameters (syntax) for function mvexp()
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
Initialization
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
reset()$
kill(all)$
stardisp:true$
stringdisp:true$
noundisp:true$
simp:true$
dotdistrib:true$
derivabbrev:true$
lispdisp:true$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
load intrinsic (maxima or lisp) function files
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
load("basic")$
load("facexp")$
load("functs")$
load("scifac")$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
batchload GA specific (maxima) function files;
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
ext:["wxm"]$
file_type_maxima:append(ext,file_type_maxima)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
batchload("gafns0")$
batchload("gafns1")$
batchload("gafns2")$
batchload("gafns3")$
batchload("gafns4")$
batchload("gafns5")$
batchload("gafns6")$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
batchload GC specific (maxima) function files;
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
batchload("gcfns1")$
batchload("gcfns2")$
batchload("gcfns3")$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
the pseudoscalar and its inverse
the lowest useable dimension pseudoscalar should be {e1,e2} i.e. Plen = 2
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
Pseudos:{e1,e2,e3}$
Pvar:listofvars(Pseudos)$
Plen:length(Pvar)$
I:Pseudos$
ni:(Plen-1)*Plen/2$
Ii:(-1)^ni*I$
kill(ni)$
ldisplay(Pvar)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
initialize this list with the only list we have so far; Pvar
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
lstbases:makelist(Pvar[n],n,1,Plen)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
the integer array, nbases (n:0,...3) is used for grader(M) in gafns4.wxm;
in order to use the same indices for the lists, (n:1,...3) define it using function array()
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
array(nbases,Plen)$
eset:setify(Pvar)$
for ng:1 thru Plen do
block(nbases[ng]:combination(Plen,ng),
lstbases[ng]:full_listify(powerset(eset,ng)))$
maxnbases:(combination(Plen,floor(Plen/2)))$
nbases[0]:1$    /*an array index zero cannot be used to index any of the lists*/
ldisplay(lstbases)$
kill(eset,ng)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
initialize this list again with Pvar
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
lstblds:makelist(Pvar[n],n,1,Plen)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
the list named lstblds is used for grader(M) in gafns4.wxm;
lstblds is an list of lists of blades and allblds is a list of all blades
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
for ng:1 thru Plen do
block(lstb:lstbases[ng],
lstblds[ng]:makelist(list2blade(lst),lst,lstb))$
allblds:[]$
for ng:1 thru Plen do
block(allblds:append(allblds,lstblds[ng]))$
ldisplay(lstblds)$
ldisplay(allblds)$
kill(lstb,ng)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
end of Initialization
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
exponential function...
the first input is any multivector M (including scalar, a)
the second input is a non-negative integer, the highest index 
in the exponential sum (e.g. n=3 for full grade algebraic multivectors or
n=7 for numerical bivectors gives an accuracy of 4 decimal places)
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
show that the input index is tested and that scalar, a, is handled
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
mvexp(a,0);
mvexp(a,1);
mvexp(a,-1);
mvexp(a,1.1);
mvexp(a,5);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
tests with simple albebraic bivectors
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
B:b*{e1,e2}$
mvexp(B,2);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
C:c1*{e1,e2}+c2*{e2,e3}$
mvexp(C,3);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
the tests with mixed grade multivectors are also a strong test for the multivector
geometric product, &*, since it is used repeatedly in the exponential code
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
lstA:[2,3]$
nameA:"A"$
makelistgrademv(nameA,lstA)$
ldisplay(A)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
mvexp(A,0);
mvexp(A,1);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
mvexp(A,2);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
mvexp(A,3);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
numerical tests for several well known bivector angles
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
bv:{e1,e2}*%pi/3$
mvexp(bv,7);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
expand(ev(%,numer));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
theta:%pi/4$
ibv:{e2,e3}$
mvexp(ibv*theta,7);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
expand(ev(%,numer));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
theta:%pi/2$
ibv:{e1,e3}$
mvexp(ibv*theta,9);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
expand(ev(%,numer));
/* [wxMaxima: input   end   ] */

/* Maxima can't load/batch files which end with a comment! */
"Created with wxMaxima"$
